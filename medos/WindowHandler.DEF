(*********************************                               * *    WindowHandler              **    *************              **                               **    Version 4   20.12.81       **                               **    Christian Jacobi           * *    Institut fuer Informatik   **    ETH-Zuerich                **    CH-8092 Zuerich            **                               *********************************) DEFINITION MODULE WindowHandler;  (* Ch. J. 20.12.81*)  FROM SYSTEM IMPORT WORD, ADDRESS;  IMPORT Screen;   EXPORT QUALIFIED    Window,     Bitmap, Font, BlockDescriptor, Mode,    WindowDescriptor, WindowSignal, SignalSet, WindowProc,    CreateWindow, OpenWindow, CloseWindow, ChangeWindow,     Clear,    Replicate, BlockTransfer, DisplayDot, DisplayChar,    WriteChar,     FreeChars, FreeLines, GetPos, SetPos, ClearChars, ClearLines,    SetDotPos, GetDotPos,     LoadFont, SetFont,     UseForDefault, DefaultWindow,     PutOnTop, NextDown, SaveWindow,     SelectWindow,    FullScreen,     OpenBitmapWindow,    IgnoreWindowSignal;  CONST N = 24;  TYPE    Window           = POINTER TO WindowDescriptor;    Bitmap           = Screen.Bitmap;          (* Bitmap;                          *)    Font             = Screen.Font;            (* Font;                            *)    BlockDescriptor  = Screen.BlockDescriptor; (* RECORD x,y,w,h: CARDINAL END;    *)    Mode             = Screen.Mode;            (* (replace, paint, invert, erase); *)    WindowHint;    WindowDescriptor =      RECORD                               wptr:      WindowHint;      (* do not access *)                bm:        Bitmap;                  font:      Font;                    overlaid:  BOOLEAN;         (* window not completely visible *)        outerblk:  BlockDescriptor; (* in coordinates of the original bitmap *)        innerblk:  BlockDescriptor; (* in coordinates of the original bitmap *)        header:    ARRAY [0..N-1] OF CHAR;        resSystem: ADDRESS;         (* initialized with NIL; do not access *)        resOwner:  ADDRESS;         (* initialized with NIL; do not access *)      END;      (* do not make copies of windowdescriptors;         all fields considered read only,         the fields may dynamically change values *)    WindowSignal     = (redraw, save,                         moved, changed, fontchanged, opened, closed,                        usedfordefault, enddefault);    (* - redraw, save:             if not restored automatic               requests on the owner;               save:   when called, the window is visible               redraw: when called, the window is visible but cleared             if restoring is done automatic               allows notifying of action; is called after the action                has been done;               No call of redraw when Clear puts the window on top        - moved, changed:             if restoring is done automatic               called after the action has been done;               allows notifying of action;               if not restored automatic               this call replaces a redraw signal; it is a request       - fontchanged, opened:             called after the action has been done;             allows notifying of action;         - closed:             called before the window disappears;              allows notifying of action         - usedfordefault, enddefault:             allows notifying of action     *)    SignalSet        = SET OF WindowSignal;    WindowProc       = PROCEDURE(Window, WindowSignal);  PROCEDURE CreateWindow(VAR w: Window;              x, y, width, height: CARDINAL;                name: ARRAY OF CHAR;                               savecontents: BOOLEAN;                             signal: WindowProc;                VAR done: BOOLEAN);    (*        w: new created window       x, y: coordinates of the (left, bottom) edge of the border        width, height: of the border       name: titel       savecontents: pointwise saved and restored on overlapping        signal:    procedure called when an event to signalize occurs                  Warning: signal must not cause operations on other windows;                           otherwise infinite loops may be programmed    *)                                                     PROCEDURE OpenWindow(VAR w: Window; x, y, width, height: CARDINAL;                        name: ARRAY OF CHAR; VAR done: BOOLEAN);    (* Short form of CreateWindow with       savecontents := TRUE; signal := IgnoreWindowSignal*)  PROCEDURE CloseWindow(VAR w: Window);  PROCEDURE ChangeWindow(w: Window; x, y, width, height: CARDINAL;                         VAR done: BOOLEAN);  (* operators *)  PROCEDURE Clear(w: Window);  PROCEDURE Replicate(w: Window; VAR dest: BlockDescriptor;                      m: Mode; VAR pattern: ARRAY OF WORD);    (* a pattern contains the size of its image in the first word,       followed by the image *)  PROCEDURE BlockTransfer(dw: Window; VAR dest: BlockDescriptor;                          m: Mode; sw: Window; VAR source: BlockDescriptor);    (* transfering between overlapping windows is not garanteed        in the current implementation*)  PROCEDURE DisplayDot(w: Window; x, y: CARDINAL; m: Mode);     PROCEDURE DisplayChar(w: Window; VAR lineBlk: BlockDescriptor;                        VAR f: Font; ch: CHAR);  (* Text Windows; positioning only with non proportional fonts *)  PROCEDURE WriteChar(w: Window; ch: CHAR);  PROCEDURE FreeChars(w: Window): CARDINAL;    (* returns number of free characters in the current line *)  PROCEDURE FreeLines(w: Window): CARDINAL;    (* returns number of empty lines; the current line not counted *)  PROCEDURE GetPos(w: Window; VAR line, pos: CARDINAL);      PROCEDURE SetPos(w: Window; line, pos: CARDINAL);  PROCEDURE ClearChars(w: Window; n: CARDINAL);    (* clears n positions but at most the rest of the current line *)  PROCEDURE ClearLines(w: Window; n: CARDINAL);    (* clears n full lines but at least the rest of the current line *)  (* positioning with dot coordinates *)  PROCEDURE GetDotPos(w: Window; VAR x, y: CARDINAL);  PROCEDURE SetDotPos(w: Window; x, y: CARDINAL);  PROCEDURE LoadFont(w: Window; fontName: ARRAY OF CHAR; VAR ok: BOOLEAN);  PROCEDURE SetFont(w: Window; VAR f: Font);   (* defaults *)  PROCEDURE UseForDefault(w: Window);    (* denote the system to use this w as default Window*)  PROCEDURE DefaultWindow(): Window;  (* visibility *)  PROCEDURE PutOnTop(w: Window);  PROCEDURE NextDown(w: Window): Window;    (* w=NIL:  gets the window on top       w<>NIL: gets the window below of w       if w is bottom window: returns NIL.       The window list is ordered according to visibility        (overlaying of windows); when the visibility changes while       following the list, windows may be overseen or seen twice ! *)  PROCEDURE SaveWindow(w: Window): BOOLEAN;    (* allows to destroy the visible look of a window on the screen       (sets the window to be overlaid);       on further WindowHandler operations the window will first be redrawn. *)         (* special *)  PROCEDURE SelectWindow(VAR w: Window; x, y: CARDINAL; VAR found: BOOLEAN);    (* Returns the window in which the point x,y is visible*)  PROCEDURE FullScreen(): Window;    (* the dummy window which denotes the whole screen; *)   PROCEDURE OpenBitmapWindow(VAR w: Window; VAR bm: Bitmap; VAR done: BOOLEAN);    (* enables WindowHandler operations onto bitmaps (of module Screen).       A bitmap window cannot be changed;       it is not included in the window list build by         next field of WindowDescriptor;       it is not tested against visibility nor overlapping *)  PROCEDURE IgnoreWindowSignal(w: Window; s: WindowSignal);    END WindowHandler.  