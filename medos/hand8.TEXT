Ac8.  The DebuggerCc Y15Christian Jacobi 15.5.82, rev. 28.9.82+If an error occurs while executing a program, the operatingsystem will make a complete dump of the main memory to the disk.  Thedebugger is an aid to inspect this dumpfile.Even though the debugger seems to have a large number of commands, its useis mostly self-explaining.  The commands are well structured.B Y208.1.  Starting the Debugger+Type in 7debug0 to start the debugger.  Thedebugger asks for the dumpfile to analyze.  Type RETURN to takethe default dump files, otherwise the filename.  3If the default filenamesare not used, some debugger versions also ask for the file where the upper memory bank isdumped.0  The debugger asks if thedefault files for reference and listing information should betaken.  (RETURN or blank is interpreted as yes).  Next, the debugger constructs its internal data structures.  Ifthe default files are not taken, it may ask for severalfilenames.  To use the default files type RETURN.  Now the debugger is ready to start the interactive inspection ofthe saved dump.B Y208.2.  General Debugging Dialog+The debugger shows several windows, having different activecommands.  The mouse is used to control the debugger.  Clickingthe middle button of the mouse within a window willshow the active commands inside that window with a 1menu0.  Toselect a command, move the cursor to that command in the menuand release the button.  The left button is usually used toexecute the most important of the active commands immediately (i.e. without going through the menu).Some windows have a scroll bar at the left.  In the scroll bar thebuttons have different meanings:The left button scrolls the current line to the top; the rightbutton scrolls the current line to the bottom and the middlebutton is used for relative positioning.Most debugging interactions are done at the source level.  Additionally, the debugger gives some machine-levelinformation.  This information allows debugging to be continuedin cases where the source level information is not (now)complete.  The debugger should be useful not only for debuggingsimple programs, but also for system programs, where binaryinformation, process descriptors and other low-level data isused.B Y208.3.  The Debugger Windows and Their CommandsC Y158.3.1.  The Procedure Chain Window+The procedure chain window shows the calling sequence of active procedures.+f1 w15Commands0+x25f7list: 0 +x50 Y2Shows the listing of a program unit (a procedure or a module) in the programwindow.  After giving thelist command, select a unit by pointing at it with the mouse.  +x25f7data: 0 +x50 Y2Shows the data of a program unit in the data window.  After giving the data command,select a unitby pointing at it with the mouse.+x25f7mark: 0 +x50 Y2Shows the procedure mark of a program unit in the memorywindow.  After giving themark command, select a unit by pointing at it with the mouse.  +The left button combines the two commands for listing and data.The data and the listing of the selected procedure areshown in their respective windows.Each procedure in the procedure chain is described by one line.  The procedure nameis followed by the name of the module, the actual programcounter value and the base address of the procedure frame.  For modules with a missing reference file, the procedure name isreplaced by its internal number.+f1 w15Some Procedures Have a Mark:+7<==0   This is the most recent procedure.  It is the top procedurein the window.7xxx0   This procedure is the main procedure of the process,usually the main module initialization code.  It is thebottom procedure in the window.7pv0   This procedure has been called as a procedure variable.7...0   Length of procedure chain exceeds maximum length displayed by the debugger.C Y158.3.2.  The Program Window+The program window is usedfor inspection of the text of the program to be debugged.  Thewindow shows the program text prefixed with a line number and anoctal location counter.  Lines which do not fit into the window areclipped.+f1 w15Commands0+x25f7pc:0 +x50 Y2Asks for an octal number and searches for this numberas program counter in the program.+x25f7line:0 +x50 Y2Asks for a line number and searches for that line.+If default filenames are not used, the debugger asks for thelisting file every time a new module is shown in the programwindow.  A RETURN input will use the default listing file whosename corresponds to the module name.  Press ESC if no listing fileexists.C Y158.3.3.  The Data Window+The data windowshows the data of the inspected modules.+f1 w15Commands0+x25f7select: 0 +x50 Y2This is the default command which is executed if theleft mouse button is pressed inside the data window.1Applied to a variable:0 If it is a pointer (<> 7NIL0) it shows its referenced variablein the variable window.  If it is a record, an array, a set or a bitsetit shows its value in the variable window (see 8.3.4).  If it is of type7ADDRESS0 it ihows the referenced memory area in the memory window.  Ifits type is 7PROCESS0 it shows the process descriptor in theprocess window.1Applied to a local module:0Shows the contents of that module in the data window.1Applied to the shown program unit itself:0If the program unit is a module and is local to another one, theembedding program unit is shown.+x25f7father: 0 +x50 Y2This command is only active when a local module isshown.  Executing it causes the embedding program unit to be shown.+x25f7memory: 0 +x50 Y2Applied to a variable, this command shows the value of thevariable in the memory window.+If default filenames are not used, the debugger asks for thereference file whenever a new module is referenced for the first time inthe data window.  A RETURN input will use the default referencefile, whose name is equal to the module name.  Press ESC if noreference file exists.  The first line in the window shows the name of the module or procedurecurrently inspected, together with the name of the embeddingprogram unit (filename for global modules).  After this, the local modules and variables are shown.  Simple variables are shown with name, value, type and address.  For structured variables, the value is replaced by the size.  Theactual value can be inspected in the variable window.C Y158.3.4.  The Variable Window+The variable window shows the values of structured variables.  Thefirst line in the window shows the designator ofthe current (sub-)variable and its address.  If the designator is too long to fit intothe window, its first part is replaced by a "*".  The second line showsthe (typename and) type of the current variable.If the current variable is a record, its fields are listed with name, value (or size), type and address.  If it is an array, a list of indicesand, if possible, the corresponding values are shown.  Components may againbe shown by selecting a field or an index respectively.  +f1 w15Commands0+x25f7select: 0+x50 Y2This is the default command which is executed if theleft mouse button is pressed inside the variable window.  Appliedto a component of the shown variable, the effect is the same asdescribed for the data window.+x25f7father: 0+x50 Y2Only active if a sub-variable is shown.  Shows the "father" variable, i.e.the variable that has been shown before the latest selection.+x25f7memory: 0+x50 Y2Shows a memory extract, starting with the address of the currently shownvariable, in the memory window.+x25f7index: 0+x50 Y2Only active if an array with index type 7INTEGER0 or 7CARDINAL0 and withstructured element type is shown.  An index value has to be typed in.+x25f7text:+x50 Y2Only active if a character array is shown.  Shows the array as a text.  Nonprintable characters are replaced by periods.+x25f7normal:+x50 Y2Active if a character array is shown in "text" mode.  Returns to the "normal" modewhich also displays the indices.C Y158.3.5.  The Dialog Window+The dialog windowshows messages and prompts user input.  During the initialization of the debugger,the trap cause of the debugged program is written in the dialog window.+f1 w15Commands0+x25f7exit: 0 +x50 Y2Exit the debugger.+x25f7map: 0 +x50 Y2Install and show the load map window.p +x25f7memory: 0 +x50 Y2Install and show the memory window.+x25f7screen: 0 +x50 Y2Install and show the screen window.  (Not always possible).+x25f7process: 0 +x50 Y2Install and show the process window.C Y158.3.6.  The Memory Window+The memory window is usedfor inspection of the main memory.  This window is shown on demand only.The first column contains the octal address.  The rest ofthe line shows the contents of memory in any selected mode.+f1 w15Commands0+f7x25ind: 0 +x50 Y2Demands selection of a memory word and uses the contentsas address of the memory area to be displayed.  This is the default command executed when the left mousebutton is pressed.+f7x25addr: 0 +x50 Y2Asks for an (octal) address from the keyboard and showsthat memory portion.+f7x25process: 0 +x50 Y2Demands selection of a memory word with the mouse andshows the interpretation of this and the following wordsas a process descriptor in the process window.+f7x25mode: 0 +x50 Y2Changes the representation of the displayed memoryarea.  Another menu is shown, which lets you select the datarepresentation either as octal, cardinal, integer,byte, hexadecimal or character.C Y158.3.7.  The Load Map Window+The load map windowshows the load map.  +f1 w15Commands0+f7x25list: 0 +x50 Y2Shows the listing of a program unit in the programwindow.  After giving thelist command, select a module by pointing at it with the mouse. +f7x25data: 0 +x50 Y2Shows the data of a program unit in the data window.  After giving the data command,select a procedure or a moduleby pointing at it with the mouse. +The left button combines the two commands for listing and data.The data and the listing of the selected module areshown in their respective windows.The module names in the load map are shown with correspondingdata and code frame pointer and internal module number.C Y158.3.8.  The Process Window+The process window allowsinspection of process descriptors.  The cause of the error trap is described in this window.  This window is especially useful for debugging programs withcoroutines (PROCESS).  The displayed values correspond to themachine registers saved in the process descriptor.+ w151Commands0+f7x25debug: 0 +x50 Y2Debugs the process whose process descriptor is shownin the process window.+f7x25normal: 0 +x50 Y2Switch the process window to show the normal processdescriptor.  This is the process descriptor of the process which caused the termination.  +f7x25caller: 0 +x50 Y2Switch the process window to show the processdescriptor of the calling process.  This feature is used mainly when a programwhich uses the loader (procedure Call of module Program) is debugged.+f7x25memory: 0 +x50 Y2Displays the process descriptor in the memory window.+f7x25stack: 0 +x50 Y2Writes the number of words used in the expression stack anddisplays the contents of the expression stack in the memory window.C Y158.3.9.  The Screen Window+The screen window shows the screen of the debugged program.  Notall debugger versions support this window.  This window is shown on demand only.This window has in addition to the standard vertical scroll bar alsoa horizontal scroll bar.  The left button shows the relative locationof the shown parts of the screen.  The middle button shows, as usual, a menu.3The left mouse button shows the displayed part of the bitmap displayedin the screen window.0C Y158.3.10.  The Background Commands+A group of commands can also be activated when the cursor is outsideall windows, i.e. in the background.  These commands are used to modifythe debugging environment, like the size and location of thewindows or the fonts used.The commands of this menu are applied to the debugger itself;they have no connection to the debugged program.  After selecting a command a window has to be designated; thecommand is relative to that window.+f1 w15Commands0+f7x25exit: 0 +x50 Y2Exits the debugger like the exit command in the dialogwindow.+f7x25call: 0 +x50 Y2Shows another menu.  Selects a utility program andexecutes it.  (Either directory, copy, delete, rename,list or other important routines).  If the utility-menu isdiscarded and the keyboard is pressed, it starts acommand interpreter, reads a program name and executesthat program inside the window.  (Press 7ESC0 to quit the command interpreter).  None of the called programs is part of the debugger;it is possible to run out of memory or to getother loader or execution error messages.  The callcommand allows creation of a new, temporary window ifno window is selected.This command is dangerous.  When the called program traps or is halted, it willproduce a dump.  The new dump may overwrite the old dump, which currently is beinginspectedby the debugger, causing the debugger to inspect inconsistent data.p +f7x25remove: 0 +x50 Y2Removes the Window.  The memory, process, screen and load map windows are the only oneswhich can be removed.+f7x25move: 0 +x50 Y2Moves the window, asking the user to select the newlocation.+f7x25change: 0 +x50 Y2Changes the window size or location.  Asks the user topoint out the diagonal of the new window.Size changes have different effects for thedifferent windows.  It may be useful to have a smallerprogram window, but the lines will be clipped.  Losinginformation of the procedure call chain  window is normally nottolerated.  The memory window will always displaycontiguous areas of memory, unless it is too small todisplay anything.+f7x25font: 0 +x50 Y2Set font used for the window.  When positioning is needed (memory window!) a non-proportional (fixedwidth) font should be used.+f7x25order: 0 +x50 Y2Shows another menu with names of windows.  Select a window to be placed ontop (made it visible).+When no menu command is selected, but the mouse button is released while thecursor square points to a window, this window is put ontop (made visible).+f3Fine points:   The top line of the screen is considered to be background.  This allowsselection of the background commands when the background is not visible at all.To escape from a started command, press 7ESC.0p B8.4.  An ExampleC Y158.4.1.  Screen with Minimal Windows -f0 x25 w440  1 program window  2 procedure call chain window   3 dialog window  4 data window  5 variable window  6 background menu with move command selected   7 scroll bar  8 line number  9 approximate location; byte offset to module base. (displayed octal).10 program text11 procedure name12 name of embedding module13 program counter (like 9)14 base address of data15 execution stopped in this procedure16 this procedure is called as procedure variable17 error cause18 memory address19 message: file has been successfully opened20 name of a variable21 value of a variable22 type description+In the dialog window the trap cause 1cardinal overflow0, isdisplayed.  The procedure call chain window shows, that the processterminated at location 360B in the procedure 7GetMouse0 of themodule 7CursorStuff0.  This location is approximately found online 108 in the program window.  On that line the cardinalexpression 7x-xOff0 is found.  In this program example 7xOff0 isdeclared as a constant of value 90 (Line 102in the program window, usually constants are not displayed in thedebugger).  Inspection of the data window shows that 7x0 has thevalue 89, which was the cause of the overflow.  3(Note:  The actual library moduleCursorStuff will NOT cause such cardinal overflows.)0C Y158.4.2.  Screen with Additional Opened Windows+ w440In this figure, additional windows have been opened.  The module 7WindowDialogue0in the load map window has been selected, causingthe modules program and data to be shown.-f0x2530 load map window31 process window32 memory window33 screen window34 registers saved in processdescriptor35 process pointer36 error cause37 module number38 module name39 module base address (data segment, in octal)40 screen of debugged program (shows again a window)41 horizontal scroll bar of the screen window42 cursor43 interactive dialog; the screen window had been changed44 memory address (inside the memory scroll bar)45 memory data; current mode is octal46 designator of variable shown47 address of variable shown48 type of structured variable49 list of indices (point to an index to display further information)