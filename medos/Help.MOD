IMPLEMENTATION MODULE Help;  (* Ch. Jacobi 8.9.80; modified 23.8.82*)  FROM Terminal IMPORT BusyRead, Write, WriteString, WriteLn;  FROM CursorStuff IMPORT MenuSelection;  FROM SYSTEM IMPORT WORD;  FROM FileSystem IMPORT File, Create, Close, SetOpen, SetPos, SetWrite, SetRead;  FROM Screen IMPORT GetSystemBitmap, Bitmap;  FROM BitmapIO IMPORT WriteBitmap, ReadBitmap;  IMPORT Program, OutTerminal, MDWhatToDebug;    VAR onscreen, onterminal, trace, filesaved: BOOLEAN;      f: File; bm: Bitmap;    PROCEDURE Save;  BEGIN    IF NOT filesaved THEN Create(f, "DK") END;    SetWrite(f); SetPos(f, 0, 0);    WriteBitmap(f, bm); SetOpen(f);    filesaved := TRUE  END Save;  PROCEDURE Restore;  BEGIN    IF filesaved THEN       SetRead(f); SetPos(f, 0, 0);      ReadBitmap(f, bm); SetOpen(f)    END  END Restore;  PROCEDURE Helper;    VAR st: Program.Status; ch: CHAR;  BEGIN    LOOP      CASE     MenuSelection("*HELP|continue|terminate|halt|debug|connect|clear|save|restore") OF        0: BusyRead(ch)|        2: EXIT|        3: Program.Terminate(Program.normal)|        4: HALT|        5: Program.Call("debug", FALSE, st)  |        6: Connect|        7: Write(14C)|        8: Save|        9: Restore      ELSE      END;    END;  END Helper;  PROCEDURE Connect;    VAR i: CARDINAL; ch: CHAR;  BEGIN    i := MenuSelection("*Connect Help|Terminal|Screen");    CASE i OF      0: BusyRead(ch) |      1: |      2: onterminal :=  TRUE; onscreen := FALSE|      3: onterminal := FALSE; onscreen :=  TRUE      ELSE    END  END Connect;  PROCEDURE Message(text: ARRAY OF CHAR);    VAR i: CARDINAL; ch: CHAR;        t: ARRAY [0..40] OF CHAR;  BEGIN    IF trace THEN       IF onterminal THEN WriteString(text); WriteLn END;      IF onscreen THEN         t[0] := "*"; i := 0;        LOOP          IF i>=HIGH(t) THEN EXIT          ELSIF i>HIGH(text) THEN t[i+1] := 0C; EXIT          ELSE t[i+1] := text[i]; INC(i)          END        END;        i := MenuSelection(t); BusyRead(ch)       END;    END  END Message;  PROCEDURE Debug(text: ARRAY OF CHAR);  BEGIN    IF trace THEN      Message(text);      Helper;    END  END Debug;  PROCEDURE Assert(b: BOOLEAN; text: ARRAY OF CHAR);     VAR t: BOOLEAN;  BEGIN    IF NOT b THEN       t := trace; trace := TRUE;      WriteString("ASSERT - ");      Message(text);      Helper;      trace := t    END    END Assert;    PROCEDURE Show(text: ARRAY OF CHAR; value: WORD);    (* write text and value to Terminal *)  BEGIN    IF trace THEN      WriteString(text); OutTerminal.WriteO(value, 0); WriteLn;    END  END Show;  PROCEDURE TraceOn;   BEGIN trace := TRUE  END TraceOn;   PROCEDURE TraceOff;  BEGIN trace := FALSE  END TraceOff;   PROCEDURE Trace(): BOOLEAN;  BEGIN RETURN trace  END Trace;BEGIN  GetSystemBitmap(bm);  MDWhatToDebug.debuglife := TRUE; filesaved := FALSE;  onterminal := TRUE; onscreen := FALSE; trace := TRUEEND Help.