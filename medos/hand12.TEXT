A c12.  Modula-2 on LilithC Y12 cLeo Geissmann  15.5.82+Differences between programming for various implementations can be attributed to the following causes:x251.  Extensions of the language proper, i.e. new syntactic constructs.2.  Differences in the sets of available standard procedures and data types, particularly those of the standard module SYSTEM.3.  Differences in the internal representation of data.4.  Differences in the sets of available library modules, in particular those for handling files and peripheral devices.+Whereas the first three causes affect "1low-level0" programming only, the fourth pervades all levels, because it reflects directly an entire system's available resources in software as well as hardware.  This chapter gives an overview of the Lilith specific low-level features.x25 B cW A R N I N G+ x25It must be considered that all these features should be applied with 2utmost care0, and that their use might be in 1opposition0 to the basic software, e.g. Medos-2, screen software, etc.B Y2012.1.  Code Procedures+The only extension of Modula-2 for Lilith is the addition of so-called 1code procedures0.  A code procedure is a declaration in which the procedure body has been replaced by a (sequence of) code number(s), representing machine instructions (see Lilith report [2]).  Code procedures are a facility to make available routines that are micro-coded at the level of Modula-2.This facility is reflected by the following extension to the syntax of the procedure declaration (see Modula-2 report in [1], chapter 10):- x25 t210.$   ProcedureDeclaration  =  ProcedureHeading ";" (block | codeblock) ident.$   codeblock  =  CODE CodeSequence END .$   CodeSequence  =  code {";" code}.$   code  =  [ConstExpression].+The following are typical examples of code procedure declarations:= x25PROCEDURE get(channel: CARDINAL; VAR info: WORD);  (* input info from channel *)CODE 240B (* READ *)END getPROCEDURE put(channel: CARDINAL; info: WORD);  (* output info to channel *)CODE 241B (* WRITE *)END put+Parameters of code procedures are written on the 1expression stack0 of the Lilith machine, where they must be read by the code instructions.  The compiler does not check that the parameters correspond to the instructions.  2Responsibility is left to the programmer.0B Y2012.2.  The Module SYSTEM+The module 1SYSTEM0 offers some further tools of Modula-2.  Most of them are implementation dependent and/or refer to the given processor.  Such kind of tools are sometimes necessary for the so called 1low-level programming0.  SYSTEM contains also types and procedures which allow a very basic coroutine handling.The module SYSTEM is directly known to the compiler, because its exported objects obey special rules, that must be checked by the compiler.  If a compilation unit imports objects from module SYSTEM, then no symbol file must be supplied for this module.For more detailed information see Modula-2 report in [1], chapter 12.w15Objects Exported from Module SYSTEM1Types0   + x257WORD0x50 Y2Representation of an individually accessible storage unit (one word).  No operations are allowed for variables of type 7WORD0.  A 7WORD0 parameter may be substituted by an actual parameter of any type that uses one word in storage.+ x257ADDRESS0x50 Y2Word address of any location in the storage.  The type 7ADDRESS0 is compatible with all pointer types and is itself defined as 7POINTER TO WORD0.  All integer arithmetic operators apply to this type.+ x257PROCESS0x50 Y2Type used for process handling.+ w151Procedures0+ x257NEWPROCESS(p:PROC; a: ADDRESS; n: CARDINAL; VAR p1: PROCESS)0x50 Y2Procedure to instantiate a new process.  At least 50 words are needed for the workspace of a process.+ x257TRANSFER(VAR p1, p2: PROCESS)0x50 Y2Transfer of control between two processes.+ w151Functions0+ x257ADR(variable): ADDRESS0x50 Y2Storage address of the substituted variable.+ x257SIZE(variable): CARDINAL0x50 Y2Number of words used by the substituted variable in the storage.  If the variable is of a record type with variants,  then the variant with maximal size is assumed.+ x25 n7TSIZE(type): CARDINAL07TSIZE(type, tag1const, tag2const, ... ): CARDINAL0+ x50 Y2Number of words used by a variable of the substituted type in the storage.  If the type is a record with variants, then tag constants of the last 1FieldList0 (see Modula-2 syntax in [1]) may be substituted in their nesting order.  If no or not all tag constants are specified, then the remaining variant with maximal size is assumed.B Y2012.3.  Data Representation and Parameter TransferC Y1512.3.1.  Data Representation+The basic memory unit for data is the word.  One word contains 16 bit.  Every word in data memory can be accessed explicitly.  In the following list for each data type the number of words needed in memory and the representation of the values is indicated.  The bits within a word are enumerated from left to right, i.e. the ordinal value 1 is represented by bit 15.+ x257INTEGER0x50 Y2Represented in one memory word.  Minint = 7-327680 (octal 7INTEGER(100000B)0); maxint = 7327670 (octal 777777B0).  Bit 0 is the 1sign bit0; bit 1 the 1most significant bit0.+ x257CARDINAL0x50 Y2Represented in one memory word.  Maxcard = 7655350 (octal 7177777B0).  Bit 0 is the 1most significant bit0. + x257BOOLEAN0x50 Y2Represented in one memory word.  This type must be considered as an enumeration 7(FALSE, TRUE)0 with the values 7FALSE = 00 and 7TRUE = 10 (bit 15).  Other values may cause errors.+ x257CHAR0x50 Y2Represented in one memory word.  In arrays two characters are 1packed0 into one word.  The ISO - ASCII character set is used with ordinal values in the range 7[0..255]0 (octal 7[0B..377B]0).  The compiler accepts character constants in the range 7[0C..377C]0.+ x257REAL0x50 Y2Represented in two memory words (32 bit).  Bit 0 of the first word is the 1sign bit0.  Bits 1..8 of the first word represent an 18-bit exponent0 in 1excess 128 notation0.  Bits 9..15 of the first word represent the 1high part of the  mantissa0 and the second word represents the 1low part of the mantissa0.  The mantissa is assumed to be normalized (70.5 <= mantissa < 1.00).  The most significant bit of the mantissa is not stored (it is always 1).+ x257Enumeration Types0x50 Y2Enumerations are represented in one memory word.  The first value of the enumeration is represented by the integer value 0; the subsequent enumeration values get the subsequent integer values accordingly.+ x257Subrange Types0x50 Y2Subranges are represented according to their base types.+ x257Array Types0x50 Y2Arrays are usually accessed 1indirectly0.  A pointer to an array points to the first element of the array.  In 1character arrays0 two characters are packed into one word.  The first character is stored in the high order byte of the first word (bits 0..7), the second character in the low order byte (bits 8..15), etc. + x257Record Types0x50 Y2Records are usually accessed indirectly.  A pointer to a record points to the first field of the record.  Consecutive fields of a record get consecutive memory locations.  Every field needs at least one word. + x257Set Types0x50 Y2Sets are implemented in one word.  The set element i is represented in bit i, i.e. 7{15}0 corresponds to the ordinal value 710.  7INCL(s, i)0 means: bit 7i0 in 7s0 is set to the value 710.+ x257Pointer Types0x50 Y2Pointers are represented in one memory word.  They are implemented as absolute addresses.  The pointer constant 7NIL0 is represented by the ordinal value 7177777B0.+ x257Procedure Types0x50 Y2Represented in one memory word.  The high order byte (bits 0..7) represents the module number, the low order byte (bits 8..15) the procedure number of the assigned procedure.2Warning0  1Do not use this information0.+ x257Opaque Types0x50 Y2Represented in one memory word.p + x257WORD0x50 Y2Represented in one memory word.+ x257ADDRESS0x50 Y2Represented in one memory word.  The value is an absolute address.+ x257PROCESS0x50 Y2Represented in one memory word.  The value is an absolute address pointing to a process descriptor.C Y1512.3.2.  Parameter Transfer+ w151Variable Parameters0+ x25The address is transferred to the expression stack.Y2For 1dynamic arrays0 also the value 7HIGH0 is submitted to the expression stack.  The push operation for the address is executed first.+ w151Value Parameters0+ x257Records and Arrays0x50 Y2The address is transferred to the expression stack (no matter of size).  The procedure allocates the memory space and copies the parameter.Y2For 1dynamic arrays0 also the value 7HIGH0 is submitted to the expression stack.  The push operation for the address is executed first.+ x257REAL0x50 Y2The value itself is passed to the expression stack (two words).  The procedure copies the value into its proper location.+ x257Other Types with One Word Size0x50 Y2The value itself is passed to the expression stack.  The procedure copies the value into its proper location.