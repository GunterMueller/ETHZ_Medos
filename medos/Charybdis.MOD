IMPLEMENTATION MODULE Charybdis;  (*NW 17.10.82*)  FROM SYSTEM IMPORT ADDRESS;  FROM Program IMPORT AllocateHeap;  FROM DisplayDriver IMPORT BMDescriptor, BMD, ScreenWidth, ScreenHeight;  FROM FileSystem IMPORT File, ReadWord;  FROM Terminal IMPORT Read, WriteString;  TYPE Block = RECORD x,y,w,h: CARDINAL END ;       Pattern = RECORD size: CARDINAL; b0, b1: BITSET END ;  VAR curFont, heap: ADDRESS;      font: ARRAY [0..7] OF ADDRESS;      white, black: Pattern;      page, blk: Block;  PROCEDURE REPL(m: CARDINAL; VAR bmd: BMDescriptor;                 VAR src: Pattern; VAR dest: Block);    CODE 343B  END REPL;  PROCEDURE DCH(VAR bmd: BMDescriptor; font: ADDRESS;                VAR dest: Block;  ch: CHAR);    CODE 345B  END DCH;  PROCEDURE StartLine(indent, height: CARDINAL);  BEGIN    blk.x := indent; blk.y := blk.y - height;    blk.w := PageWidth - indent; blk.h := height;    REPL(0, BMD, white, blk)  END StartLine;   PROCEDURE HSpace(w: CARDINAL);  BEGIN (*assume blk.w >= w*)    blk.x := blk.x + w; blk.w := blk.w - w  END HSpace;  PROCEDURE VSpace(h: CARDINAL);  BEGIN (*assume blk.y >= h*)    IF h > 0 THEN      blk.x := 0; blk.y := blk.y - h; blk.w := PageWidth;      blk.h := h; REPL(0, BMD, white, blk)    END  END VSpace;  PROCEDURE WSpace(h: CARDINAL);  BEGIN (*assume blk.y >= h*)    IF h > 0 THEN      blk.x := 0; blk.y := blk.y - h; blk.w := PageWidth;      blk.h := h; REPL(0, BMD, black, blk)    END  END WSpace;  PROCEDURE PrintPage(VAR text: ARRAY OF CHAR;                      VAR para: ARRAY OF ParaDesc;                      VAR line: ARRAY OF LineDesc);    VAR i,j,k,r,spw,rsp: CARDINAL; ch: CHAR;  BEGIN blk.y := PageHeight;    REPL(0, BMD, white, page);    ch := text[0]; i := 1; j := 0; k := 0;    LOOP      IF ch >= " " THEN DCH(BMD, curFont, blk, ch) ELSE        CASE ch OF      nil: (*skip*) |      eob: EXIT |      stl: WITH line[j] DO             spw := spacewidth; rsp := remspaces;             StartLine(indent, height)           END ;           r := 0; j := j+1 |      fon: curFont := font[CARDINAL(text[i])]; i := i+1 |      hsp: IF r >= rsp THEN HSpace(spw)             ELSE HSpace(spw+1); r := r+1           END |      vsp: VSpace(para[k].Y); k := k+1 |      wsp: WSpace(para[k].Y); k := k+1 |      xsp: blk.x := CARDINAL(text[i]) * 400B + CARDINAL(text[i+1]);           i := i+2; blk.w := PageWidth - blk.x |      ysp: VSpace(CARDINAL(text[i])); i := i+1        END      END ;      ch := text[i]; i := i+1    END ;    Read(ch);    IF ch = 10C THEN HALT END  END PrintPage;  PROCEDURE TrapsOn;    CODE 247B; 2; 0; 167B  END TrapsOn;  PROCEDURE TrapsOff;    CODE 247B; 2; 325B; 167B  END TrapsOff;  PROCEDURE LoadFont(fno: CARDINAL;                     VAR fnt: File;                     VAR FontWidth, FontHeight, BaseHeight: CARDINAL;                     VAR CharWidth: ARRAY OF CARDINAL;                     VAR done: BOOLEAN);    VAR L,w,h,x: CARDINAL; a0,a,b: ADDRESS; i: INTEGER;  BEGIN TrapsOff; done := FALSE;    ReadWord(fnt, L); ReadWord(fnt, x);    ReadWord(fnt, h); FontHeight := h MOD 400B;    ReadWord(fnt, i); FontWidth := ABS(i);    BaseHeight := h DIV 400B;    a := AllocateHeap(L);    IF a + L = heap THEN      TrapsOff; x := L + x + h + CARDINAL(i); (*checksum*)      heap := a; a := a DIV 4;      font[fno] := a; L := L-4; a := a*4; a0 := a;      REPEAT        ReadWord(fnt, a^); x := CARDINAL(a^) + x; a := a+1; L := L-1      UNTIL L = 0;      TrapsOn;      IF x = 0 THEN        done := TRUE; a := a0;        FOR h := 0 TO 237B DO          b := CARDINAL(a^) + a; a := a+1; i := INTEGER(b^); w := 0;          WHILE i < 0 DO            b := a0 + CARDINAL(-i) -1; b := CARDINAL(b^) + b;            i := INTEGER(b^); w := w+16          END ;          CharWidth[h] := CARDINAL(i) + w        END      ELSE WriteString(" bad checksum")      END     ELSE WriteString(" font too long")    END  END LoadFont;BEGIN white.size := 2; white.b0 := {}; white.b1 := {};  black.size := 2; black.b0 := {0,2,4,6,8,10,12,14};  black.b1 := {1,3,5,7,9,11,13,15};  PageWidth := ScreenWidth(); PageHeight := ScreenHeight();  WITH page DO    x := 0; y := 0; w := PageWidth; h := PageHeight  END ;  heap := AllocateHeap(0)END Charybdis.