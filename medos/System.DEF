(**************************************                                    *  *    MODULA 2 MULTI-PASS COMPILER    *  *    ****************************    *  *                                    *  *    MODULE System                   **    *************                   *  *                                    *  *    for Lilith computer             *  *    Version         26.1.82         *  *                                    **    Christian Jacobi                *  *    Institut fuer Informatik        *  *    ETH-Zuerich                     *  *    CH-8092 Zuerich                 *  *                                    *  *************************************)(*The compiler compiles a call of SYSTEM.NEWPROCESS into the code sequence    CX 0  2  call external module 0  procedure 2This module has to be given module number 0 by the loaderor linker; The procedurenumber 2 is given by the compilerbecause NewProcess is the second procedure and is exportedas second procedure too.The other exports are not mandatory for compiler transportation;they are not used by the compiler itself.*)DEFINITION MODULE System;      (* Ch. Jacobi    compiler dependency,                                                hardware dependency                                   S.E. Knudsen  modified to medos operative                                                system dependency                                   version 26.1.82 *)  (* Definition used to give FIXED and known:     procedure numbers for the compiler     data addresses for the hard-, firmware, the loader, pmd...       For further comments please look at the implementation *)  FROM SYSTEM IMPORT PROCESS, ADDRESS;   EXPORT QUALIFIED      EndProcess, NewProcess,       dataFrameLength,      ProcedureMark, ProcessDescriptor, ProcessPointer, Vector,      deviceMask, pRegister, savePRegister, (*bootCode,*)      interruptVectors, dataFrameTable,      userProgram, codeKey, loadedModules,       prevLoadedModules, prevProcess;  CONST dataFrameLength = 128;  TYPE    ProcedureMark =      RECORD        g:   ADDRESS;        l:   ADDRESS;        pc:  CARDINAL;        msk: BITSET      END;      ProcessDescriptor =      RECORD        mark: ProcedureMark;        s: ADDRESS;        h: ADDRESS;        errCode:  CARDINAL;        trapMask: BITSET      END;    ProcessPointer = POINTER TO ProcessDescriptor;     Vector =      RECORD        CASE CARDINAL OF          0: driver, interrupted: PROCESS |          1: driverPtr, interruptedPtr: ProcessPointer        END      END;     PROCEDURE EndProcess;  PROCEDURE NewProcess(P: PROC; a: ADDRESS; s: CARDINAL; VAR P1: PROCESS); (* hardware locations *)  VAR deviceMask:       BITSET;          (* firmware, linker *)      pRegister:        ProcessPointer;  (* firmware, linker *)      savePRegister:    ProcessPointer;  (* firmware *)      (*bootCode:         CARDINAL;        (* firmware *)*)      interruptVectors: ARRAY [7..15] OF Vector;      dataFrameTable:   ARRAY [0..dataFrameLength-1] OF ADDRESS;  (* reserved for operative system, post mortem dump *)  VAR userProgram:      PROC;      codeKey:          CARDINAL;      loadedModules:    CARDINAL;      prevLoadedModules:CARDINAL;      prevProcess:      ProcessPointer;      residentModules:  CARDINAL;END System.