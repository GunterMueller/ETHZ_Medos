(****************************************************************           Long-File-Handling / Part of                       **           MIA / Version 20 /  9.4.82 / W. Winiger            ****************************************************************)IMPLEMENTATION MODULE LongFiles;FROM FileSystem IMPORT File, Response, Reset, Create, Lookup, Rename,                       Close, ReadChar, WriteChar;FROM Terminal IMPORT Write, WriteString, WriteLn;VAR inputFile,    list1             : ARRAY [1..maxNumberOfFiles] OF File;    list2             : File;    inputName,    listName          : LongFileName;    numberOfInputFiles,    actualInputFile   : CARDINAL;    firstCall,                     (* 1st call of procedure ReadInputChar *)     endOfFile         : BOOLEAN;PROCEDURE OpenNextInputFile (VAR name: FileName; VAR found: BOOLEAN);BEGIN  IF numberOfInputFiles < maxNumberOfFiles THEN    Lookup(inputFile[numberOfInputFiles+1],name,FALSE);    found := inputFile[numberOfInputFiles+1].res = done;    IF found THEN       INC(numberOfInputFiles);      inputName[numberOfInputFiles] := name;    END;  ELSE    found := FALSE;  END;END OpenNextInputFile;PROCEDURE Announce (f: CARDINAL);BEGIN  WriteLn;  Write(' ');  WriteString(inputName[f]);  Write(' ');END Announce;PROCEDURE ReadInputChar(VAR ch: CHAR; VAR eof: BOOLEAN);BEGIN  IF NOT endOfFile THEN    IF firstCall THEN      Announce(actualInputFile);      firstCall := FALSE;    END;    ReadChar(inputFile[actualInputFile],ch);    IF inputFile[actualInputFile].eof THEN      IF actualInputFile < numberOfInputFiles THEN        Close(inputFile[actualInputFile]);        INC(actualInputFile);        Announce(actualInputFile);        ReadInputChar(ch,eof);      ELSE        endOfFile := TRUE;      END;    END;  END;  eof := endOfFile;END ReadInputChar;PROCEDURE StopInput;BEGIN  endOfFile := TRUE;END StopInput;PROCEDURE CreateFirstListing;VAR i : CARDINAL;BEGIN  FOR i := 1 TO maxNumberOfFiles DO    Create(list1[i],"DK");  END;END CreateFirstListing;PROCEDURE WriteFirstListing (ch: CHAR);BEGIN  WriteChar(list1[actualInputFile],ch);END WriteFirstListing;PROCEDURE CatalogFirstListing (VAR name: LongFileName);VAR i : CARDINAL;BEGIN  FOR i := 1 TO numberOfInputFiles DO    Lookup(list2,name[i],FALSE);    IF list2.res = done THEN Rename(list2,''); END;    Close(list2);    Rename(list1[i],name[i]);    Close(list1[i]);  END;END CatalogFirstListing;PROCEDURE ResetFirstListing;VAR i : CARDINAL;BEGIN  FOR i := 1 TO numberOfInputFiles DO    Reset(list1[i]);  END;  actualInputFile := 1;  endOfFile := FALSE;END ResetFirstListing;PROCEDURE ReadFirstListing (VAR ch: CHAR; VAR eof: BOOLEAN);BEGIN  IF NOT endOfFile THEN    ReadChar(list1[actualInputFile],ch);    IF list1[actualInputFile].eof THEN      IF actualInputFile < numberOfInputFiles THEN        INC(actualInputFile);        CreateNewSecondListing;        ReadFirstListing(ch,eof);      ELSE        endOfFile := TRUE;      END;    END;  END;  eof := endOfFile;END ReadFirstListing;PROCEDURE CreateSecondListing (VAR names: LongFileName);BEGIN  listName := names;  Lookup(list2,listName[1],TRUE);END CreateSecondListing;PROCEDURE CreateNewSecondListing;BEGIN  Close(list2);  Lookup(list2,listName[actualInputFile],TRUE);END CreateNewSecondListing;PROCEDURE WriteSecondListing (ch: CHAR);BEGIN  WriteChar(list2,ch);END WriteSecondListing;PROCEDURE CloseListings;VAR i : CARDINAL;BEGIN  FOR i := 1 TO numberOfInputFiles DO    Close(list1[i]);  END;  Close(list2);END CloseListings;BEGIN  numberOfInputFiles := 0;  actualInputFile := 1;  firstCall := TRUE;   endOfFile := FALSE;END LongFiles.