(***************************************
*                                      *
*          M E D O S - 2               *
*          *************               *
*                                      *
*                                      *
*          FileSystem:                 *
*                                      *
*          Interface for               *
*          - FileSystem users  and     *
*          - FileSystem drivers.       *
*                                      *
*          Version 2   2.10.80         *    
*                                      *
*                                      *
*          Svend Erik Knudsen          *
*          Institut fuer Informatik    *
*          ETH-Zuerich                 *
*          CH-8092 Zuerich             *
*                                      *
***************************************)

DEFINITION MODULE FileSystem;

  FROM SYSTEM IMPORT
    ADDRESS, WORD;


  EXPORT QUALIFIED
    File, Response,

    Create, Close,
    Lookup, Rename, 
    SetRead, SetWrite, SetModify, SetOpen,
    Doio, 
    SetPos, GetPos, Length,

    Reset, Again,
    ReadWord, WriteWord,
    ReadChar, WriteChar,

    Command,
    Flag, FlagSet,
    MediumType,
    FileCommand, DirectoryCommand,

    FileProc, DirectoryProc,
    CreateMedium, RemoveMedium;
    
     
  TYPE
    MediumType    = ARRAY [0..1] OF CHAR; 
    MediumHint;
 
    Flag          = (er, ef, rd, wr, ag, bytemode);
    FlagSet       = SET OF Flag;

    Response      = (done, notdone, notsupported, callerror,
                     unknownmedium, unknownfile, paramerror,
                     toomanyfiles, eom, deviceoff,
                     softparityerror, softprotected, softerror,
                     hardparityerror, hardprotected, timeout, harderror);
 
    Command       = (create, open, close,
                     lookup, rename,
                     setread, setwrite, setmodify, setopen,
                     doio,
                     setpos, getpos, length,
                     setprotect, getprotect,
                     setpermanent, getpermanent,
                     getinternal);
 
    File          = RECORD
                      bufa: ADDRESS;
                      ela: ADDRESS;
                      elodd: BOOLEAN;
                      ina: ADDRESS;
                      inodd: BOOLEAN;
                      topa: ADDRESS;
                      flags: FlagSet;
                      eof: BOOLEAN;
                      res: Response;
                      CASE com: Command OF
                        create, open, getinternal:
                          fileno, versionno: CARDINAL |
                        lookup:
                          new: BOOLEAN |
                        setpos, getpos, length:
                          highpos, lowpos: CARDINAL |
                        setprotect, getprotect:
                          wrprotect: BOOLEAN |
                        setpermanent, getpermanent:
                          on: BOOLEAN
                      END;
                      mt: MediumType;
                      mediumno: CARDINAL;
                      mh: MediumHint;      (* hint for 'FileSystem' *)
                      submedium: ADDRESS;  (* driver information *) 
                    END;

 
 
  (* The routines defined by the filesystem can be grouped in
     routines for:  

       1.  Opening, closing and renaming of files.   
           (Create, Close, Lookup, Rename)

       2.  Reading and writing of files.  
           (SetRead, SetWrite, SetModify, SetOpen, Doio)
 
       3.  Positioning of files. 
           (SetPos, GetPos, Length)

       4.  Streamlike handling of files.  
           (Reset, Again, Read, Write, ReadChar, WriteChar)
 
       5.  Handling of drivers.
           (CreateMedium, RemoveMedium, FileCommand, DirectoryCommand)
                                                                    *)
 
 
 
  PROCEDURE Create(VAR f: File; mediumname: ARRAY OF CHAR);
    (* creates a new temporary (or nameless) file f on the 
       named device. *) 
 

  PROCEDURE Close(VAR f: File);
    (* terminates the operations on file f, i.e. cuts off the 
       connection between variable f and the filesystem. A tem-
       porary file will hereby be destroyed whereas a file with
       a not empty name remains in the directory for later use. *)
 


  PROCEDURE Lookup(VAR f: File; filename: ARRAY OF CHAR; new: BOOLEAN);
    (* searches file 'filename' on device 'devicename'. If the   
       file does not exist and 'new' is TRUE, a new file with 
       the given name will be created. *)

 
  PROCEDURE Rename(VAR f: File; filename: ARRAY OF CHAR);
    (* changes the name of the file to 'filename'. IF the new
       name is empty, f is changed to be a temporary file. *) 
 


  PROCEDURE SetRead(VAR f: File);
    (* initializes the file for reading. *)   
 
 
  PROCEDURE SetWrite(VAR f: File);   
    (* initializes the file for writing. *) 
 
 
  PROCEDURE SetModify(VAR f: File); 
    (* initializes the file for modifying. *) 
 
   
  PROCEDURE SetOpen(VAR f: File); 
    (* terminates any input- or outputoperations on the file. *) 
 
 
  PROCEDURE Doio(VAR f: File);
    (* is used in connection with SetRead, SetWrite and
       SetModify in order to read, write or modify a file
       sequentially. *) 

 
 
  PROCEDURE SetPos(VAR f: File; highpos, lowpos: CARDINAL);
    (* sets the current position of file f to byte
       highpos * 2**16 + lowpos. *)

 
  PROCEDURE GetPos(VAR f: File; VAR highpos, lowpos: CARDINAL);
    (* returns the current byte position of file f. *)  
 
 
  PROCEDURE Length(VAR f: File; VAR highpos, lowpos: CARDINAL);
    (* returns the length of file f in highpos and lowpos. *)
 
 

  PROCEDURE Reset(VAR f: File);
    (* sets the file into state opened and the position
       to the beginning of the file. *) 
 
 
  PROCEDURE Again(VAR f: File);
    (* prevents a subsequent call of ReadWord (or ReadChar)
       from reading the next value on the file. Instead, the  
       value read just before the call of Again is returned 
       once more. *) 


 
 
  PROCEDURE ReadWord(VAR f: File; VAR w: WORD);
    (* reads the next word on the file. *)      
 
 
  PROCEDURE WriteWord(VAR f: File; w: WORD);
    (* appends word w to the file. *) 
 
 

  PROCEDURE ReadChar(VAR f: File; VAR ch: CHAR);
    (* reads the next character on the file. *)
 
 
  PROCEDURE WriteChar(VAR f: File; ch: CHAR);
    (* appends character ch to the file. *) 

 

  (* The following declarations are only usefull when programming 
     or importing drivers. *)  

 
  TYPE
    FileProc      = PROCEDURE (VAR File); 
    DirectoryProc = PROCEDURE (VAR File, ARRAY OF CHAR); 
 

 
  PROCEDURE CreateMedium(mt: MediumType; mediumno: CARDINAL;
                         fp: FileProc; dp: DirectoryProc;
                         VAR done: BOOLEAN); 
    (* makes the driver servicing medium (mt, mediumno) callable 
       from the filesystem. *)

 
  PROCEDURE RemoveMedium(mt: MediumType; mediumno: CARDINAL;
                         VAR done: BOOLEAN);           
    (* makes the driver serving (mt,mediumno) unknown to the 
       filesystem. *)

 

  PROCEDURE FileCommand(VAR f: File); 
    (* calls the corresponding driver procedure. *)


  PROCEDURE DirectoryCommand(VAR f: File; filename: ARRAY OF CHAR);
    (* calls the corresponding driver procedure. *)
 
 
END FileSystem.

