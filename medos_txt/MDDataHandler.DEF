DEFINITION MODULE MDDataHandler; (* P. Karrer 5.7.82 *)

  FROM SYSTEM IMPORT WORD;

  EXPORT QUALIFIED RefSymbol, Ident,
                   DataChainPtr, TypeDescPtr, ConstPtr, FieldPtr,
                   ProcRefInfo, CreateModData, CreateProcData,
                   UseTypeInfo, ReturnTypeInfo;

  TYPE

    RefSymbol = 
      (reffileRS, endRS, moduleRS, procRS, typeRS, varRS, typerefRS,
       undefRS, integerRS, cardinalRS, charRS, booleanRS, realRS,
       bitsetRS, proctypRS, wordRS, addressRS, processRS, subrRS, enumRS,
       setRS, pointerRS, arrayRS, arrdynRS, recordRS, hiddenRS, openRS,
       constRS, fieldRS,absRS, indRS, relRS);
      (* this type corresponds to the one used by M2CReference *)

    Ident = ARRAY [0..15] OF CHAR;

    ConstPtr = POINTER TO Constant;

    FieldPtr = POINTER TO Field;

    TypeDescPtr = POINTER TO TypeDescriptor;

    DataChainPtr = POINTER TO DataChainEl;

    Constant =
      RECORD
        constname: Ident;
        constnum: CARDINAL;
        nextconst: ConstPtr
      END;

    Field =
      RECORD
        offset: CARDINAL;
        fieldname: Ident;
        fieldtype: TypeDescPtr;
        nextfield: FieldPtr
      END;

    TypeDescriptor =
      RECORD
        typenum: CARDINAL;
        typename: Ident;
        typesize: CARDINAL;  
        nexttype: TypeDescPtr;      (*linear list; consider field as not exported*)
        CASE typekind: RefSymbol OF
          setRS, pointerRS, arrdynRS, openRS:
            eltype: TypeDescPtr |
          subrRS:
            min, max: CARDINAL; subrtype: TypeDescPtr |
          enumRS:
            firstconst: ConstPtr; nrOfConsts: CARDINAL |
          arrayRS:
            indextype, arrEltype: TypeDescPtr |
          recordRS:
            firstfield: FieldPtr; nrOfFields: CARDINAL 
        ELSE (* empty *)
        END
      END;

    DataChainEl =
      RECORD
        objectname: Ident;
        next: DataChainPtr;
        CASE objecttype: RefSymbol OF
          varRS:
            varValue: WORD;
            varAddr: CARDINAL;
            varType: TypeDescPtr |
          moduleRS, procRS:
            father, datachain: DataChainPtr
        END
      END;

  PROCEDURE ProcRefInfo(n: CARDINAL);
    (*creates name and 'isLocalMod' of chain^[n] *)

  PROCEDURE CreateProcData(n: CARDINAL; VAR root: DataChainPtr);
    (*creates data tree of chain^[n] *)

  PROCEDURE CreateModData(m: CARDINAL; VAR root: DataChainPtr);
    (*creates data tree of modTab[m]^ *)

  PROCEDURE UseTypeInfo;

  PROCEDURE ReturnTypeInfo;


END MDDataHandler.
