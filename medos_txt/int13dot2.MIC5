*         PROCEDURE REPL;   (* PATTERN TO BLOCK TRANSFER*         ===============                                *) *           INIT;*           MASK3 := MSK(0,(DX+DW) MOD 16);             T : MASK3.                                            TEMPORARY: 7*           SR := DX MOD 16;                            3 : DX MOD 16(10)*           MASK1 := COMPL(MSK(0,SR));                  G : MASK1REPL      0 #INIT      T             - JSR              INIT          1 -   OR  ZA 0  5  -  -  - - -   - 0 -   -    R5          0 #ENDREPL   Z             - JMP              IF LENGTH = 0           1 -   +   AB 0  6  H  -  - - -   - 0 SR  ALU  R6 + H -> SR          1 B   OR  DZ 0  -  7  MR - - -   - 1 0        MSK(0,SR) -> 7          1 B   &   DA 0  6  3  -  - - -   - 1 17       R6 & 17 -> R3           1 -   OR  ZA 0  3  -  -  - - -   - 0 SR  ALU  R3 -> SR          1 B   -XR DZ 0  -  G  MR - - -   - 1 0        _MSK(0,SR) -> G*             WORDS := (DW + (DX MOD 16)) DIV 16;       H : WORDS*             DWORD := BMA + DX DIV 16 +                L : DWORD*                      (BMHEIGHT-DH-DY) * BMWIDTH;*             ENDWORD := DWORD + (DH-1)*BMWIDTH;        9 : ENDWORD*             CW := SOURCE.COUNT*BMWIDTH;               7 : CW*             DBANK := BMA MOD 4;                       2 : DBANK          1 B   +   AB 0  3  H  -  - - -   - 0 -   -    R3 + H -> H        ^          1 B*  &   DQ 0  H  H  R  4 - -   - 0 ALU ALU  (H^4) & Q -> H          1 B*  &   DQ 0  6  1  R  4 - -   - 0 ALU ALU  (R6^4) & Q -> R1          1 Q   -&  DA 0  S  -  -  - - -   - 1 3        _3 & S -> Q          1 B   +   AQ 0  1  1  -  - - -   - 0 -   -    Q + R1 -> R1            1 B   -   AB 1  2  10 -  - - -   - 0 -   -    R2 - R10 -> R10          1 Q   -   AB 1  10 11 -  - - -   - 0 -   -    R10 - R11 -> Q          1 B   OR  ZA 0  4  T  -  - - -   - 0 -   -    R4 -> T          0 #MUL16     T             - JSR              Q * T -> Q  (-2-)          1 B   +   AQ 0  1  L  -  - - -   - 0 -   -    R1 + Q -> L                       1 Q   -+  ZA 0  11 -  -  - - -   - 0 -   -    R11 - 1 -> Q          0 #MUL16     T             - JSR              Q * T -> Q  (-2-)          1 B   +   AQ 0  L  11 -  - - -   - 0 -   -    L + Q -> R11            1 Q   OR  ZA 0  5  -  -  - - -   - 0 -   -    R5 -> Q          0 #MUL16     T             - JSR              Q * T -> Q  (-2-)          1 B   OR  ZA 0  7  T  -  - - -   - 0 -   -    R7 -> T          1 B   OR  ZQ 0  -  7  -  - - -   - 0 -   -    Q -> R7          1 B   &   DA 0  S  2  -  - - -   - 1 3        3 & S -> R2$*             FOR I := 1 TO LENGTH DO (* LOOP OVER THE WORDS OF THE PATTERN *)*               BITPAT := ROT(SOURCE.DOTS[I],SR);       3 : BITPAT*               DWD := DWORD;                           1 : DWD#FORI     1 B*  +   ZA 1  12 12 -  - - -   - 0 MAR ALU  R12 -> MAR, R12+1 -> R12          1 B   OR  DZ 0  -  3  RR - - -   - 0 ALU MD   (MD^SR) -> R3           1 B   OR  ZA 0  L  1  -  - - -   - 0 -   -    L -> R1*               WHILE DWD <= ENDWORD DO (* LOOP OVER THE LINES OF THE DEST BLOCK*                                    CORRESPONDING TO THE ACTUAL PATTERN WORD *)*                 DA := DWD;                            S : DA*                 W := WORDS;                           8 : W*                 R6 := BITPAT AND MASK1;               6 : R6*                                                       Q : M[DA]#WHILE    1 -   -   AB 0  1  11 -  - - -   - 0 -   -    R1 - R11 - 1          0 #ENDWHILE  C             - JMP              GOTO ENDWHILE IF > 0          1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 B   OR  ZA 0  1  S  -  - - -   - 0 MAR ALU  R1 -> S -> MAR.                                                       H -> R10          1 B   OR  ZA 0  3  6  -  - - -   - 0 -   -    R3 -> R6          1 B   &   AB 0  G  6  -  - - -   - 0 -   -    G & R6 -> R6          1 Q   OR  DZ 0  -  -  -  - - -   - 0 ALU MD   MD -> Q*                 CASE MODE OF          1 -   -+  DA 1  0  -  -  - - -   - 1 2        R0 - 2          0 #INVERT2   Z             - JMP              GOTO INVERT2 IF =0          0 #ERASE2    -F            - JMP              GOTO ERASE2 IF >0          1 -   OR  ZA 0  0  -  -  - - -   - 0 -   -    R0          0 #PAINT2    -Z            - JMP              GOTO PAINT2 IF #0*                 0: (* REPLACE, DEST := PATTERN *)*                   R6 := R6 OR (NOT MASK1 AND M[DA]);*                   WHILE W > 0 DO  (* LOOP OVER THE WORDS OF A LINE *)*                     M[DA] := R6;  (* OF THE DEST BLOCK             *)*                     DA := DA + 1;*                     R6 := BITPAT;*                     W := W - 1;*                   END;#REPLACE2 1 Q   -&  AQ 0  G  -  -  - - -   - 0 -   -    _G & Q -> Q          1 B   OR  AQ 0  6  6  -  - - -   - 0 -   -    R6 OR Q -> R6           1 B   OR  ZA 0  H  10 -  - - -   - 0 -   -    H -> R10          0 #ENDWHL4   FZ            - JMP              GOTO ENDWHL4 IF <=0#WHILE4   1 -   OR  ZA 0  6  -  -  - - -   - 0 MD  ALU  R6 -> MD          1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 B*  +   ZA 1  S  S  -  - - -   - 0 MAR ALU  S -> MAR, S+1 -> S          1 B   OR  ZA 0  3  6  -  - - -   - 0 -   -    R3 -> R6          1 B   -+  ZA 0  10 10 -  - - -   - 0 -   -    R10 - 1 -> R10          0 #WHILE4    -Z            - JMP              GOTO WHILE4 IF #0*                   Q := MASK3 AND R6;*                   R6 := M[DA] & NOT MASK3;*                   M[DA] := R6 OR Q  / #ENDWHL4  1 Q   &   AB 0  T  6  -  - - -   - 0 -   -    T & R6 -> Q          1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 -   OR  ZA 0  S  -  -  - - -   - 0 MAR ALU  S -> MAR          1 B   -XR ZA 0  T  6  -  - - -   - 0 -   -    _0 XOR T -> R6          1 B   &   DA 0  6  6  -  - - -   - 0 ALU MD   MD & R6 -> R6           1 -   OR  AQ 0  6  -  -  - - -   - 0 MD  ALU  R6 OR Q -> MD           0 #ENDCAS    T             - JMP              GOTO ENDCASE*                   1: (* PAINT, DEST := DEST OR PATTERN *) *                     WHILE W > 0 DO*                       M[DA] := R6 OR M[DA];*                       DA := DA + 1;*                       R6 := BITPAT;                   Q : M[DA]*                       W := W - 1;*                     END;#PAINT2   1 B   OR  ZA 0  H  10 -  - - -   - 0 -   -    H -> R10          0 #ENDWHL5   FZ            - JMP              GOTO ENDWHL5 IF <=0#WHILE5   1 -   OR  AQ 0  6  -  -  - - -   - 0 MD  ALU  R6 OR Q -> MD           1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 B*  +   ZA 1  S  S  -  - - -   - 0 MAR ALU  S -> MAR, S+1 -> S          1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 -   OR  ZA 0  S  -  -  - - -   - 0 MAR ALU  S -> MAR          1 B   OR  ZA 0  3  6  -  - - -   - 0 -   -    R3 -> R6          1 Q   OR  DZ 0  -  -  -  - - -   - 0 ALU MD   MD -> Q          1 B   -+  ZA 0  10 10 -  - - -   - 0 -   -    R10 - 1 -> R10          0 #WHILE5    -Z            - JMP              GOTO WHILE5 IF #0*                     R6 := MASK3 AND R6;*                     M[DA] := R6 OR M[DA]  /#ENDWHL5  1 B   &   AB 0  T  6  -  - - -   - 0 -   -    T & R6 -> R6          1 -   OR  AQ 0  6  -  -  - - -   - 0 MD  ALU  R6 OR Q -> MD           0 #ENDCAS    T             - JMP              GOTO ENDCASE*                   2: (* INVERT, DEST := DEST XOR PATTERN *)*                     WHILE W > 0 DO*                       M[DA] := R6 XOR M[DA];*                       DA := DA + 1;*                       R6 := BITPAT;                   Q : M[DA]*                       W := W - 1;*                     END;#INVERT2  1 B   OR  ZA 0  H  10 -  - - -   - 0 -   -    H -> R10          0 #ENDWHL6   FZ            - JMP              GOTO ENDWHL5 IF <=0#WHILE6   1 -   XOR AQ 0  6  -  -  - - -   - 0 MD  ALU  R6 XOR Q -> MD          1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 B*  +   ZA 1  S  S  -  - - -   - 0 MAR ALU  S -> MAR, S+1 -> S          1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 -   OR  ZA 0  S  -  -  - - -   - 0 MAR ALU  S -> MAR          1 B   OR  ZA 0  3  6  -  - - -   - 0 -   -    R3 -> R6          1 Q   OR  DZ 0  -  -  -  - - -   - 0 ALU MD   MD -> Q          1 B   -+  ZA 0  10 10 -  - - -   - 0 -   -    R10 - 1 -> R10          0 #WHILE6    -Z            - JMP              GOTO WHILE6 IF #0*                     R6 := MASK3 AND R6;*                     M[DA] := R6 XOR M[DA]  /#ENDWHL6  1 B   &   AB 0  T  6  -  - - -   - 0 -   -    T & R6 -> R6          1 -   XOR AQ 0  6  -  -  - - -   - 0 MD  ALU  R6 XOR Q -> MD          0 #ENDCAS    T             - JMP              GOTO ENDCASE$*                   3: (* ERASE, DEST := NOT PATTERN AND DEST *)*                     WHILE W > 0 DO*                       M[DA] := NOT R6 AND M[DA];*                       DA := DA + 1;*                       R6 := BITPAT;                   Q : M[DA]*                       W := W - 1;*                     END;#ERASE2   1 B   OR  ZA 0  H  10 -  - - -   - 0 -   -    H -> R10          0 #ENDWHL7   FZ            - JMP              GOTO ENDWHL7 IF <=0#WHILE7   1 -   -&  AQ 0  6  -  -  - - -   - 0 MD  ALU  _R6 & Q -> MD           1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 B*  +   ZA 1  S  S  -  - - -   - 0 MAR ALU  S -> MAR, S+1 -> S          1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 -   OR  ZA 0  S  -  -  - - -   - 0 MAR ALU  S -> MAR          1 B   OR  ZA 0  3  6  -  - - -   - 0 -   -    R3 -> R6          1 Q   OR  DZ 0  -  -  -  - - -   - 0 ALU MD   MD -> Q          1 B   -+  ZA 0  10 10 -  - - -   - 0 -   -    R10 - 1 -> R10          0 #WHILE7    -Z            - JMP              GOTO WHILE7 IF #0*                     R6 := MASK3 AND R6;*                     M[DA] := NOT R6 AND M[DA]#ENDWHL7  1 B   &   AB 0  T  6  -  - - -   - 0 -   -    T & R6 -> R6          1 -   -&  AQ 0  6  -  -  - - -   - 0 MD  ALU  _R6 & Q -> MD *                   END; (* CASE *)*                   DWD := CW + DWD;#ENDCAS   1 -   OR  ZA 0  2  -  -  - - -   - 0 BNK ALU  R2 -> BNK          1 -   OR  ZA 0  S  -  -  - - -   - 0 MAR ALU  S -> MAR          1 B   +   AB 0  7  1  -  - - -   - 0 -   -    R7 + R1 -> R1          0 #WHILE     -C            - JMP              GOTO WHILE*                 END; (* WHILE DWD < ENDWORD *)*                 DWORD := DWORD + BMWIDTH;*               END; (* FOR I ..* *)#ENDWHILE 1 B   +   AB 0  4  L  -  - - -   - 0 -   -    R4 + L -> L          0 #ENDREPL   C             - JMP              GOTO ENDREPL IF OVERFLOW          1 B   -+  ZA 0  5  5  -  - - -   - 0 -   -    R5 - 1 -> R5          0 #FORI      -Z            - JMP              GOTO FORI IF #0           0 #ENDREPL   T             - JMP              GOTO ENDREPL$.         FLOATING POINT ROUTINES    (NW 5.11.80) ..         +---+--------+---------------------------+.         I S I  EXPO  I        MANTISSA           I.         +---+--------+---------------------------+.           0   1 - 8            9 - 31 ..         SIGN:  0 = POSITIVE, 1 = NEGATIVE.         EXPO:  WEIGHT = 200B.         MANT:  LEADING ONE BIT IS OMITTEDFSUB      1 B   OR  DZ 0  -  2  R  1 - -   - 1     1    1^1 -> R2          0 #A1        T             - JMP              GOTO A1FADD      1 B   &   ZA 0  2  2  -  - - -   - 0 -   -    0 -> R2       #A1       1 B   OR  DZ 0  -  1  -  - - -   S 0 POP -    STK -> R1    YH          1 -   OR  AB 0  T  1  -  - - -   - 0 -   -    T OR R1          0 #Y0        Z             - JMP              IF =0 GOTO Y0           1 B   XOR AB 0  2  1  -  - - -   - 0 -   -    R2 XOR R1 -> R1          1 B   XOR DZ 0  -  5  -  - - -   S 0 POP -    STK -> R5    XL          1 B   OR  DZ 0  -  0  -  - - -   S 0 POP -    STK -> R0    XH          1 -   OR  AB 0  0  5  -  - - -   - 0 -   -    R0 OR R5          0 #X0        Z             - JMP              IF =0 GOTO X0           1 B   &   DA 0  0  2  R 11 - -   - 1     377  (377^9)&R0 -> R2 XE          1 B   &   DA 0  1  3  R 11 - -   - 1     377  (377^9)&R1 -> R3 YE          1 B   &   DA 0  0  4  -  - - -   - 1     177  177&R0 -> R4 XH          1 B   &   DA 0  1  6  -  - - -   - 1     177  177&R1 -> R6 YH          1 B   OR  DA 0  4  4  R 11 - -   - 1     1    (1^9) OR R4 -> R4          1 B   OR  DA 0  6  6  R 11 - -   - 1     1    (1^9) OR R6 -> R6.         XE,XH,XL IN R2,R4,R5.         YE,YH,YL IN R3,R6,T           1 B   -+  AB 1  3  2  -  - - -   - 0 -   -    R2-R3 -> R2  ZE          0 #A3       -F             - JMP              IF <0 THEN (XE<YE)          1 Q   OR  ZA 0  5  -  -  - - -   - 0 -   -      R5 -> Q#A2       1 BQR +   ZA 0  4  4  -  - - -   - 0 -   -      REP (R4,Q)/2  X          1 B   +   DA 0  2  2  R 11 - -   - 1     1        R2+(1^9) -> R2          0 #A2       -Z             - JMP                UNTIL R2=0            1 B   OR  ZQ 0  -  5  -  - - -   - 0 -   -      Q -> R5          0 #A5        T             - JMP#A3       0 #A5        Z             - JMP              ELSIF >0 THEN (XE>XY)          1 B   +   AB 0  2  3  -  - - -   - 0 -   -      R3+R2 -> R3           1 Q   OR  ZA 0  T  -  -  - - -   - 0 -   -      T -> Q#A4       1 BQR +   ZA 0  6  6  -  - - -   - 0 -   -      REP (R6,Q)/2  Y          1 B   -+  DA 1  2  2  R 11 - -   - 1     1        R2-(1^9) -> R2          0 #A4       -Z             - JMP                UNTIL R2=0            1 B   OR  ZQ 0  -  T  -  - - -   - 0 -   -      Q -> T.                                                       END #A5       1 -   OR  ZA 0  0  -  -  - - -   - 0 -   -    R0   SIGN(X)          0 #A6       -F             - JMP              IF <0 THEN          1 B   -   ZA 1  5  5  -  - - -   - 0 -   -      -R5 -> R5          1 B   -   ZA C  4  4  -  - - -   - 0 -   -      -R4 -> R4.                                                       END #A6       1 -   OR  ZA 0  1  -  -  - - -   - 0 -   -    R1   SIGN(Y)          0 #A7       -F             - JMP              IF <0 THEN          1 Q   -   AB 1  5  T  -  - - -   - 0 -   -      R5-T -> Q          1 B   -   AB C  4  6  -  - - -   - 0 -   -      R4-R6 -> R6           0 #A8        T             - JMP              ELSE#A7       1 Q   +   AB 0  5  T  -  - - -   - 0 -   -      R5+T -> Q          1 B   +   AB C  4  6  -  - - -   - 0 -   -      R4+R6 -> R6 .                                                       END .         ZE,ZH,ZL IN R3,R6,Q #A8       1 -   OR  AQ 0  6  -  -  - - -   - 0 -   -    R6 OR Q          0 #ZERO      Z             - JMP              IF Z=0 GOTO ZERO          1 B   &   DA 0  6  0  R  1 - -   - 1     1    (1^1)&R6 -> R0  SIGN          0 #A9       -F             - JMP              IF Z<0 THEN          1 Q   -   ZQ 1  -  -  -  - - -   - 0 -   -      -Q -> Q          1 B   -   ZA C  6  6  -  - - -   - 0 -   -      -R6 -> R6.                                                       END #A9       1 -   -+  DA 1  6  -  R 10 - -   - 1     1    R6 - 400  NORMALIZE          0 #A10       F             - JMP              IF >=0 THEN          1 BQR +   ZA 0  6  6  -  - - -   - 0 -   -      (R6,Q)/2          1 B   OR  ZQ 0  -  T  -  - - -   - 0 -   -      Q -> T          1 B   +   DA 0  3  3  R 11 - -   - 1     1      R3+(1^9) -> R3  ZE          0 #A13      -F             - JMP                IF >=0 OVERFLOW          0 TRAP(6)    T             - JMP              ELSE#A10      1 B   OR  ZQ 0  -  T  -  - - -   - 0 -   -      Q -> T          1 -   +   ZA 0  6  -  -  - - -   - 0 -   -      R6          0 #A12       H             - JMP                IF -H THEN#A11      1 B   -+  DA 1  3  3  R 11 - -   - 1     1        REP R3-(1^9) -> R3          1 B   +   AB 0  T  T  -  - - -   - 0 -   -          2*T -> T          1 B   +   AB C  6  6  -  - - -   - 0 -   -          2*R6 -> R6          0 #A11      -H             - JMP                  UNTIL H.                                                         END#A12      1 -   OR  ZA 0  3  -  -  - - -   - 0 -   -      R3         ZE          0 #ZERO      F             - JMP                IF <0 GOTO ZERO.                                                       END #A13      1 B   &   DA 0  6  6  -  - - -   - 1     177  177&R6 -> R6          1 B   OR  AB 0  3  6  -  - - -   - 0 -   -    R3 OR R6 -> R6          1 -   OR  AB 0  0  6  -  - - -   S 0 PSH -    R0 OR R6 -> STK  ZH          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP#X0       1 -   OR  ZA 0  1  -  -  - - -   S 0 PSH -    R1 -> STK               1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP#Y0       1 B   OR  DZ 0  -  T  -  - - -   S 0 POP -    STK -> T          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP#ZERO     1 B   &   ZA 0  0  T  -  - - -   S 0 PSH -    0 -> T -> STK           1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP$FMUL      1 B   OR  ZA 0  T  7  -  - - -   - 0 -   -    T   -> R7    YL          1 B   OR  DZ 0  -  6  -  - - -   S 0 POP -    STK -> R6    YH          1 B   OR  DZ 0  -  5  -  - - -   S 0 POP -    STK -> R5    XL          1 B   OR  DZ 0  -  4  -  - - -   S 0 POP -    STK -> R4    XH          1 -   OR  AB 0  4  5  -  - - -   - 0 -   -    R4 OR R5     X          0 #ZERO      Z             - JMP              IF X=0 GOTO ZERO          1 -   OR  AB 0  6  7  -  - - -   - 0 -   -    R6 OR R7     Y          0 #ZERO      Z             - JMP              IF Y=0 GOTO ZERO          1 -   XOR AB 0  4  6  -  - - -   S 0 PSH -    R4 XOR R6 -> STK          1 B   &   DA 0  4  2  R 11 - -   - 1     377  (377^9)&R4 -> R2  XE          1 B   &   DA 0  6  3  R 11 - -   - 1     377  (377^9)&R6 -> R3  YE          1 B   &   DA 0  4  4  -  - - -   - 1     177  177&R4 -> R4          1 B   &   DA 0  6  6  -  - - -   - 1     177  177&R6 -> R6          1 B   OR  DA 0  4  4  R 11 - -   - 1     1    (1^9) OR R4 -> R4          1 B   OR  DA 0  6  6  R 11 - -   - 1     1    (1^9) OR R6 -> R6.         XE,XH,XL IN R2,R4,R5.         YE,YH,YL IN R3,R6,R7    SIGN IN STK          1 B   +   AB 0  2  3  -  - - -   - 0 -   -    R2+R3 -> R3  ZE          1 Q   OR  ZA 0  5  -  -  - - -   - 0 -   -    R5 -> Q          0 #MUL16     T             - JSR              XL*YL  Q*T -> (R2,Q)          1 B   OR  ZA 0  2  1  -  - - -   - 0 -   -    R2 -> R1     ZL          1 Q   OR  ZA 0  5  -  -  - - -   - 0 -   -    R5 -> Q          1 B   OR  ZA 0  6  T  -  - - -   - 0 -   -    R6 -> T          0 #MUL16     T             - JSR              XL*YH          1 B   +   AQ 0  1  1  -  - - -   - 0 -   -    R1+Q -> R1   ZL          1 B   +   ZA C  2  0  -  - - -   - 0 -   -    R2+C -> R0   ZH          1 Q   OR  ZA 0  4  -  -  - - -   - 0 -   -    R4 -> Q          1 B   OR  ZA 0  7  T  -  - - -   - 0 -   -    R7 -> T          0 #MUL16     T             - JSR              XH*YL                   1 B   +   AQ 0  1  1  -  - - -   - 0 -   -    R1+Q -> R1   ZL          1 B   +   AB C  2  0  -  - - -   - 0 -   -    R2+R0 -> R0  ZH          1 Q   OR  ZA 0  4  -  -  - - -   - 0 -   -    R4 -> Q          1 B   OR  ZA 0  6  T  -  - - -   - 0 -   -    R6 -> T          0 #MUL16     T             - JSR              XH*YH          1 B   +   AQ 0  0  0  -  - - -   - 0 -   -    R0+Q -> R0   ZH          0 #M1        F             - JMP              IF -F THEN          1 B   +   AB 0  1  1  -  - - -   - 0 -   -      2*R1 -> R1 NORMALIZE          1 B   +   AB C  0  0  -  - - -   - 0 -   -      2*R0 -> R0          1 B   -+  DA 1  3  3  R 11 - -   - 1     1      R3 - (1^9) -> R3.                                                       END #M1       1 B   OR  DZ 0  -  7  -  - - -   S 0 POP -    STK -> R7   SIGN          1 B   -+  DA 1  3  3  R  2 - -   - 1     1    R3 - (200^9) -> R3          0 #ZERO     -C             - JMP              IF <0 GOTO ZERO          0 TRAP(6)    F             - JMP              IF >= 400 OVERFLOW          1 B*  OR  DZ 0  0  0  R 10 - -   - 0 ALU ALU  R0^8 -> R0          1 B*  OR  DZ 0  1  1  R 10 - -   - 0 ALU ALU  R1^8 -> R1          1 B   &   DA 0  0  2  R 10 - -   - 1     377  (377^8)&R0 -> R2          1 B   &   DA 0  0  0  -  - - -   - 1     177  177&R0 -> R0          1 B   &   DA 0  1  T  -  - - -   - 1     377  377&R1 -> T          1 B   OR  AB 0  2  T  -  - - -   - 0 -   -    R2 OR T -> T    ZL          1 B   OR  AB 0  3  0  -  - - -   - 0 -   -    R3 OR R0 -> R0          1 B   &   DA 0  7  7  R  1 - -   - 1     1    (1^1)&R7 -> R7          1 -   OR  AB 0  7  0  -  - - -   S 0 PSH -    R7 OR R0 -> STK ZH          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAPFDIV      1 B   OR  DZ 0  -  6  -  - - -   S 0 POP -    STK -> R6    YH          1 B   OR  DZ 0  -  5  -  - - -   S 0 POP -    STK -> R5    XL          1 B   OR  DZ 0  -  4  -  - - -   S 0 POP -    STK -> R4    XH          1 -   OR  AB 0  6  T  -  - - -   - 0 -   -    R6 OR T          0 TRAP(6)    Z             - JMP              IF Y=0 ZERO DIVIDE          1 -   OR  AB 0  4  5  -  - - -   - 0 -   -    R4 OR R5          0 #ZERO      Z             - JMP              IF X=0 GOTO ZERO          1 -   XOR AB 0  4  6  -  - - -   S 0 PSH -    R4 XOR R6 -> STK          1 B   &   DA 0  4  2  R 11 - -   - 1     377  (377^9)&R4 -> R2  XE          1 B   &   DA 0  6  3  R 11 - -   - 1     377  (377^9)&R6 -> R3  YE          1 B   &   DA 0  4  4  -  - - -   - 1     177  177&R4 -> R4          1 B   &   DA 0  6  6  -  - - -   - 1     177  177&R6 -> R6          1 B   OR  DA 0  4  4  R 11 - -   - 1     1    (1^9) OR R4 -> R4          1 B   OR  DA 0  6  6  R 11 - -   - 1     1    (1^9) OR R6 -> R6.         XE,XH,XL IN R2,R4,R5.         YE,YH,YL IN R3,R6,T           1 B   -   AB 1  2  3  -  - - -   - 0 -   -    R2-R3 -> R3  QE          1 B   -+  AB 1  T  5  -  - - -   - 0 -   -    R5-T -> R5  (R-Y -> R)            1 B   -+  AB C  6  4  -  - - -   - 0 -   -      FIRST DIV STEP          0 #D1        S             - JMP              IF R >= Y THEN          1 B   OR  DZ 0  -  1  -  - - -   - 1     1      1 -> R1   (1 -> Q)          1 B   +   DA 0  3  3  R 11 - -   - 1     1      R3+(1^9) -> R3          0 #D2        T             - JMP              ELSE#D1       1 B   &   ZA 0  1  1  -  - - -   - 0 -   -      0 -> R1  (0 -> Q)          1 B   +   AB 0  T  5  -  - - -   - 0 -   -      R5+T -> R5 (R+Y -> R)           1 B   +   AB C  6  4  -  - - -   - 0 -   -      R4+R6 -> R4 .                                                       END #D2       1 B   -   DA 1  1  2  -  - - -   - 1     10   8-R1 -> R2 (8-Q -> N)          0 #XDIV      T             - JSR              N DIV STEPS FOR QH          1 B   OR  ZA 0  1  0  -  - - -   - 0 -   -    R1 -> R0   SAVE QH          1 B   &   ZA 0  1  1  -  - - -   - 0 -   -    0 -> R1          0 #XDIV      T             - JSR              16 DIV STEPS FOR QL          1 B   OR  DZ 0  -  2  -  - - -   S 0 POP -    STK -> R2  SIGN          1 B   -&  DA 0  0  0  R 11 - -   - 1     1   -(1^9)&R0 -> R0          1 B   +   DA 0  3  3  R  2 - -   - 1     1    R3 + (200^9) -> R3 QE          0 #ZERO      S             - JMP              IF QE<0 GOTO ZERO          0 TRAP(6)    F             - JMP              OVERFLOW          1 B   OR  AB 0  3  0  -  - - -   - 0 -   -    R3 OR R0 -> R0          1 B   &   DA 0  2  2  R  1 - -   - 1     1    (1^1)&R2 -> R2          1 -   OR  AB 0  0  2  -  - - -   S 0 PSH -    R0 OR R2 -> STK  QH          1 B   OR  ZA 0  1  T  -  - - -   - 0 -   -    R1 -> T          QL          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP.         R2 DIVISION STEPS                                 .         (R IN (R4,Q),  Q IN R1, COUNT N IN R2)        REPEAT#XDIV     1 B   +   AB 0  5  5  -  - - -   - 0 -   -      2*R5 -> R5 (2*R -> R)           1 B   +   AB C  4  4  -  - - -   - 0 -   -      2*R4 -> R4          1 B   +   AB 0  1  1  -  - - -   - 0 -   -      2*R1 -> R1 (2*Q -> Q)           1 B   -+  AB 1  T  5  -  - - -   - 0 -   -      R5-T -> R5 (R-Y -> R)           1 B   -+  AB C  6  4  -  - - -   - 0 -   -      R4-R6 -> R4           0 #XD1       S             - JMP                IF R >= Y THEN          1 B   +   ZA 1  1  1  -  - - -   - 0 -   -        R1+1     (Q+1 -> Q)           0 #XD2       T             - JMP                ELSE#XD1      1 B   +   AB 0  T  5  -  - - -   - 0 -   -        R5+T ->  (R+Y -> R)           1 B   +   AB C  6  4  -  - - -   - 0 -   -        R4+R6 -> R4.                                                         END#XD2      1 B   -+  ZA 0  2  2  -  - - -   - 0 -   -      R2-1 -> R2          0 #XDIV     -Z             - JMP              UNTIL R2=0          1 B   OR  DZ 0  -  2  -  - - RTN - 1     20   16 -> R2FCMP      1 B   OR  ZA 0  T  7  -  - - -   - 0 -   -    T -> R7      YL          1 B   OR  DZ 0  -  6  -  - - -   S 0 POP -    STK -> R6    YH          1 B   OR  DZ 0  -  5  -  - - -   S 0 POP -    STK -> R5    XL          1 B   OR  DZ 0  -  4  -  - - -   S 0 POP -    STK -> R4    XH          1 B   &   ZA 0  T  T  -  - - -   - 0 -   -    0 -> T          1 -   XOR AB 0  4  6  -  - - -   - 0 -   -    R4 XOR R6          0 #C1       -F             - JMP              JUMP IF SIGNS EQUAL          1 -   OR  ZA 0  4  -  -  - - -   - 0 -   -    R4          0 #LSS       F             - JMP          0 #GTR       T             - JMP#C1       1 B   -   AB 1  5  7  -  - - -   - 0 -   -    R5-R7 -> R7          1 B   -   AB C  4  6  -  - - -   - 0 -   -    R4-R6 -> R6          0 #C2        F             - JMP              JUMP IF X < Y           1 -   OR  AB 0  6  7  -  - - -   - 0 -   -    R6 OR R7          0 #EQL       Z             - JMP          1 -   OR  ZA 0  4  -  -  - - -   - 0 -   -    R4          0 #LSS       F             - JMP          0 #GTR       T             - JMP#C2       1 -   OR  ZA 0  4  -  -  - - -   - 0 -   -    R4          0 #GTR       F             - JMP#LSS      1 -   -   ZA 0  T  -  -  - - -   S 0 PSH -    -1 -> STK          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP#EQL      1 -   &   ZA 0  T  -  -  - - -   S 0 PSH -    0 -> STK          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP#GTR      1 -   +   ZA 1  T  -  -  - - -   S 0 PSH -    1 -> STK          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP$FFCT      1 B   OR  DZ 0  -  0  R  2 - -   - 0 ALU IR   IR^2 -> R0          0 F1X        F             - JMP                  1 B   +   AB 0  0  0  -  - - -   - 0 -   -    R0*2 -> R0          0 FLOAT1     F             - JMP**         PROCEDURE FLOAT(C: CARDINAL): REAL*         PROCEDURE FLOAT1(D: DOUBLE): REAL*FLOAT     1 -   &   ZA 0  0  -  -  - - -   S 0 PSH -    0 -> STKFLOAT1    1 B   OR  DZ 0  -  2  -  - - -   S 0 POP -    STK -> R2  XH          1 -   OR  AB 0  T  2  -  - - -   - 0 -   -    T OR R2          0 #F3        Z             - JMP              IF # 0 THEN          1 B   +   DZ 0  -  1  R 11 - -   - 1     230    (230^9) -> R1          1 -   OR  ZA 0  2  -  -  - - -   - 0 -   -      R2          0 #F2        H             - JMP                IF -H THEN#F1       1 B   -+  DA 1  1  1  R 11 - -   - 1     1        REPEAT R1-(1^9)          1 B   +   AB 0  T  T  -  - - -   - 0 -   -          2*T -> T          1 B   +   AB C  2  2  -  - - -   - 0 -   -          2*R2 -> R2          0 #F1       -H             - JMP                  UNTIL H*                                                         END#F2       1 B   &   DA 0  2  2  -  - - -   - 1     177    177 & R2 -> R2          1 B   OR  AB 0  1  2  -  - - -   - 0 -   -      R1 OR R2 -> R2*                                                       END#F3       1 -   OR  ZA 0  2  -  -  - - -   S 0 PSH -    R2 -> STK  XH          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP**F1X       1 B   +   AB 0  0  0  -  - - -   - 0 -   -    R0*2 -> R0          0 FIX1       F             - JMP$*         PROCEDURE FIX(X: REAL): CARDINAL*         PROCEDURE FIX1(X:REAL; BIAS: CARDINAL): DOUBLE*FIX       1 B*  OR  DZ 0  T  T  R 11 - -   S 1     230  T -> STK, 230^9 -> TFIX1      1 Q   OR  DZ 0  -  -  -  - - -   S 0 POP -    STK -> Q    XL          1 B   OR  DZ 0  -  2  -  - - -   S 0 POP -    STK -> R2   XH          1 -   OR  AQ 0  2  -  -  - - -   - 0 -   -    R2 OR 0          0 #FX2       Z             - JMP              IF #0 THEN          1 B   &   DA 0  2  1  R 11 - -   - 1     377    (377^9)&R2 -> R1          1 B   &   DA 0  2  2  -  - - -   - 1     177    177 & R2 ->R2          1 B   OR  DA 0  2  2  R 11 - -   - 1     1      (1^9) OR R2 -> R2          1 B   -+  AB 1  1  T  -  - - -   - 0 -   -      T - R1 -> T          0 TRAP(6)    F             - JMP                OUT OF RANGE          0 #FX2       Z             - JMP                IF #0 THEN  (NORM)#FX1      1 BQR +   ZA 0  2  2  -  - - -   - 0 -   -        REPEAT (R2,Q)/2          1 B   -+  DA 1  T  T  R 11 - -   - 1     1          T - (1^9) -> T          0 #FX1      -Z             - JMP                  UNTIL T=0*                                                         END*                                                       END#FX2      1 B   OR  ZQ 0  -  T  -  - - -   - 0 -   -    Q -> T          1 -   OR  ZA 0  0  -  -  - - -   - 0 -   -    R0          0 #FX3      -F             - JMP          1 -   OR  ZA 0  2  -  -  - - -   S 0 PSH -    R2 -> STK   HI          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP#FX3      1 -   OR  ZA 0  2  -  -  - - -   - 0 -   -    R2          0 TRAP(6)   -Z             - JMP              OVERFLOW          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP#ENDREPL  0 EXITREPL   T             - JSR          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP*         POP(S);*         POP(P);*         POP(H);*         POP(G);*         POP(L);*         POP(M);*         POP(T);*       END REPL;* END DISPLAYHANDLER;***.ORG 6000.MAP 246   ESCAPE-INSTRUCTION: JUMP TO THE BEGINNING OF THE 4-TH K