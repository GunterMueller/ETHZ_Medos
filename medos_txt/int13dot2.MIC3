.         Q DIV T -> Q, Q MOD T -> R2#DIVIDE   1 BQL &   ZB 0  -  2  -  - - -   - 0 -   -    [0,Q]*2 -> [R2,Q]#DIVIDE+1 1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          1 BQL +   AB 0  T  2  -  - - -   - 0 MDS -    DIV STEP          1 B   -+  AB 1  T  2  -  - - -   - 0 -   -    R2-T -> R2          0 #DIV1      C             - JMP              GOTO DIV1 IF C          1 BQL +   AB 0  T  4  -  - - -   - 0 MDS -    DIV STEP !WITHOUT.                                                       CHANGING R2"          1 B   +   AB 0  T  2  -  - - RTN - 0 -   -    T + R2 -> R2, RTN#DIV1     1 BQL +   AB 0  T  4  -  - - RTN - 0 MDS -    DIV STEP !R2 UNCHANGED" .         Q * T -> [R2,Q]     (N STEPS) #MUL16    1 B   &   ZB 0  -  2  -  - - -   - 0 -   -    0 -> R2          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - -   - 0 MDS -    MUL STEP          1 BQR +   AB 0  T  2  -  - - RTN - 0 MDS -    MUL STEP$TRAP(1)   1 B   OR  DZ 0  -  0  -  - - -   - 1 1        1 -> R0          0 TRAP(R0)   T             - JMP              TRAP(R0)TRAP(2)   1 B   OR  DZ 0  -  0  -  - - -   - 1 2        2 -> R0          0 TRAP(R0)   T             - JMP              TRAP(R0)TRAP(3)   1 B   OR  DZ 0  -  0  -  - - -   - 1 3        3 -> R0          0 TRAP(R0)   T             - JMP              TRAP(R0)TRAP(4)   1 B   OR  DZ 0  -  0  -  - - -   - 1 4        4 -> R0          0 TRAP(R0)   T             - JMP              TRAP(R0)TRAP(5)   1 B   OR  DZ 0  -  0  -  - - -   - 1 5        5 -> R0          0 TRAP(R0)   T             - JMP              TRAP(R0)TRAP(6)   1 B   OR  DZ 0  -  0  -  - - -   - 1 6        6 -> R0          0 TRAP(R0)   T             - JMP              TRAP(R0)TRAP(7)   1 B   OR  DZ 0  -  0  -  - - -   - 1 7        7 -> R0          0 TRAP(N)    T             - JMP              TRAP(N)TRAP(10)  1 B   OR  DZ 0  -  0  -  - - -   - 1 10       10 -> R0.         0 TRAP(N)    T             - JMP              TRAP(N).         MASKABLE TRAPS:TRAP(N)   1 B   OR  DZ 0  -  5  -  - - -   - 1 7        7 -> R5 !TRAP MSK"          1 -   +   AB 0  5  P  -  - - -   - 0 MAR ALU  R5 + P -> MAR           1 -   -   ZA 1  0  -  -  - - -   - 0 SR  ALU  -R0 -> SR          1 B   OR  DZ 0  -  5  RR - - -   - 0 ALU MD   (MD^SR) -> R5           0 0          F             - RTN              RTN IF N IN R5          0 0          T             - POP              ADJUST 2911-STACK.         NOT MASKABLE TRAPS: TRAP(R0)  1 -   OR  ZA 0  0  -  -  - - -   - 0 MD  ALU  R0 -> MD !TRAP NR"          1 B   OR  DZ 0  -  1  -  - - -   - 1 6        6 -> R1          1 -   +   AB 0  1  P  -  - - -   - 0 MAR ALU  R1 + P -> MAR           1 B   OR  DZ 0  -  2  -  - - -   - 1 3        3 -> R2          1 -   OR  ZA 0  2  -  -  - - -   - 0 MAR ALU  R2 -> MAR          1 B   OR  DZ 0  -  1  -  - - -   - 1 7        7 -> R1          1 B   OR  DZ 0  -  3  R 10 - -   - 1 1        (1^10) -> R3          1 -   &   DA 0  3  -  -  - - -   - 0 ALU MD   MD & R3          0 INTERRUPT  Z             - JMP              IF NOT 7 IN M[3]#LOOP     0 #LOOP      T             - JMP              LOOP END.         EXTENSION TO THE SYS INSTRUCTION:>4        1 B   -+  ZA 0  0  0  -  - - -   - 0 -   -    R0 - 1 -> R0          0 ILL.INSTR  -Z            - JMP              IF IR<>5          1 B*  OR  DZ 0  T  T  R 10 - -   - 1 0        T -> STK, (0^10) -> T.         VERSION CODE OF 13.2: 1          1 B   OR  DA 0  T  T  -  - - -   - 1 1        1 OR T -> T          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP$.ORG 2000 .    ILLEGAL INSTRUCTIONS:.MAP 214,215.MAP 21,334ILL.INSTR 0 TRAP(1)    T             - JMP              TRAP(1).MAP 212DMUL      1 Q   OR  DZ 0  -  -  -  - - -   S 0 POP -    STK -> Q          0 #MUL16     T             - JSR              T * Q -> [R2,Q]          1 B*  OR  ZQ 0  2  T  -  - - -   S 0 PSH -    Q -> T, R2 -> STK          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP.MAP 213DDIV      1 -   OR  ZA 0  T  -  -  - - -   - 0 -   -    T          0 TRAP(7)    Z             - JSR              IF ZERODIVIDE           1 Q   OR  DZ 0  -  -  -  - - -   S 0 POP -    STK -> Q          1 BQL OR  DZ 0  -  2  -  - - -   S 0 POP -    [STK,Q]*2 -> [R2,Q]          0 #DIVIDE+1     T          - JSR              [STK,Q] DIV T -> [R2,T]           1 B*  OR  ZQ 0  2  T  -  - - -   S 0 PSH -    Q -> T, R2 -> STK          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP.MAP 216DSHL      1 B   OR  DZ 0  -  2  -  - - -   S 0 POP -    STK -> R2          1 B   +   AB 0  T  T  -  - - -   - 0 -   -    T + T -> T          1 -   +   AB C  2  2  -  - - -   S 0 PSH -    R2 + R2 + C -> STK          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP.MAP 217DSHR      1 B   OR  DZ 0  -  2  -  - - -   S 0 POP -    STK -> R2          1 Q   OR  ZA 0  T  -  -  - - -   - 0 -   -    T -> Q          1 BQR +   ZA 0  2  2  -  - - -   - 0 -   -    [R2,Q] DIV 2 -> [R2,Q]          1 B*  OR  ZQ 0  2  T  -  - - -   S 0 PSH -    Q -> T, R2 -> STK          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP$#LINE15   1 B   OR  DZ 0  -  1  -  - - -   - 1 17       17 -> R1          0 INTERRUPT  T             - JMP              GOTO INTERRUPT#LINE14   1 B   OR  DZ 0  -  1  -  - - -   - 1 16       16 -> R1          0 INTERRUPT  T             - JMP              GOTO INTERRUPT#DISK     1 B   OR  DZ 0  -  1  -  - - -   - 1 15       15 -> R1          0 INTERRUPT  T             - JMP              GOTO INTERRUPT#CLOCK    1 B   OR  DZ 0  -  1  -  - - -   - 1 14       14 -> R1          0 INTERRUPT  T             - JMP              GOTO INTERRUPT#LINE11   1 B   OR  DZ 0  -  1  -  - - -   - 1 13       13 -> R1          0 INTERRUPT  T             - JMP              GOTO INTERRUPT#LINE10   1 B   OR  DZ 0  -  1  -  - - -   - 1 12       12 -> R1          0 INTERRUPT  T             - JMP              GOTO INTERRUPT#LINE9    1 B   OR  DZ 0  -  1  -  - - -   - 1 11       11 -> R1          0 INTERRUPT  T             - JMP              GOTO INTERRUPT#LINE8    1 B   OR  DZ 0  -  1  -  - - -   - 1 10       10 -> R1.         0 INTERRUPT  T             - JMP              GOTO INTERRUPT$INTERRUPT 1 B   +   AB 0  1  1  -  - - -   - 0 -   -    R1 + R1 -> R1           1 B   +   ZA 1  1  2  -  - - -   - 0 -   -    R1 + 1 -> R2          1 B   OR  DZ 0  -  3  -  - - -   - 1 1        1 -> R3.         0 TRANSFER   T             - JMP              TRANSFER(TRUE,R1,R2)TRANSFER  1 -   OR  ZA 0  1  -  -  - - -   - 0 MAR ALU  R1 -> MAR          1 B   OR  DZ 0  -  1  -  - - -   - 0 ALU MD   MD -> R1          0 #SAVEREGS     T          - JSR              SAVE          1 -   OR  ZA 0  P  -  -  - - -   - 0 MD  ALU  P -> MD          1 -   OR  ZA 0  2  -  -  - - -   - 0 MAR ALU  R2 -> MAR          1 B   OR  ZA 0  1  P  -  - - -   - 0 -   -    R1 -> P          0 #RESTREGS     T          - JSR              RESTORE          1 Q   OR  DZ 0  -  -  -  - S JMP - 0 ALU IR4  JMAP#SAVEREGS 0 #SAVESTK   T             - JSR              SAVE EXPR STACK          1 -   OR  ZA 0  G  -  -  - - -   - 0 MD  ALU  G -> MD          1 B*  +   ZA 1  P  P  -  - - -   - 0 MAR ALU  P -> MAR, P+1 -> P          1 -   OR  ZA 0  L  -  -  - - -   - 0 MD  ALU  L -> MD          1 B*  +   ZA 1  P  P  -  - - -   - 0 MAR ALU  P -> MAR, P+1 -> P          1 -   OR  ZQ 0  -  -  -  - - -   - 0 MD  PC   PC -> MD          1 B*  +   ZA 1  P  P  -  - - -   - 0 MAR ALU  P -> MAR, P+1 -> P          1 -   OR  ZA 0  M  -  -  - - -   - 0 MD  ALU  M -> MD          1 B*  +   ZA 1  P  P  -  - - -   - 0 MAR ALU  P -> MAR, P+1 -> P          1 -   OR  ZA 0  S  -  -  - - -   - 0 MD  ALU  S -> MD          1 B*  +   ZA 1  P  P  -  - - -   - 0 MAR ALU  P -> MAR, P+1 -> P          1 B   +   DA 0  H  H  -  - - -   - 1 30       30 + H -> H          1 -   OR  ZA 0  H  -  -  - - -   - 0 MD  ALU  H -> MD          1 -   OR  ZA 0  P  -  -  - - -   - 0 MAR ALU  P -> MAR          1 B   -+  DA 1  P  P  -  - - RTN - 1 5        P - 5 -> P, RTN$#RESTREGS 1 B*  +   ZA 1  P  P  -  - - -   - 0 MAR ALU  P -> MAR, P + 1 -> P          1 B   OR  DZ 0  -  G  -  - - -   - 0 ALU MD   MD -> G          1 -   OR  ZA 0  G  -  -  - - -   - 0 MAR ALU  G -> MAR          1 -   OR  ZQ 0  -  -  -  - - -   - 0 F   MD   MD -> F          1 B*  +   ZA 1  P  P  -  - - -   - 0 MAR ALU  P -> MAR, P + 1 -> P          1 B   OR  DZ 0  -  L  -  - - -   - 0 ALU MD   MD -> L          1 B*  +   ZA 1  P  P  -  - - -   - 0 MAR ALU  P -> MAR, P + 1 -> P          1 -   OR  ZQ 0  -  -  -  - - -   - 0 PC  MD   MD -> PC          1 -   OR  ZA 0  3  -  -  - - -   - 0 -   -    R3          0 #REST      Z             - JMP              GOTO REST IF R3=0          1 -   OR  ZA 0  P  -  -  - - -   - 0 MAR ALU  P -> MAR          1 B   OR  DZ 0  -  1  -  - - -   - 1 3        3 -> R1          1 B   OR  DZ 0  -  M  -  - - -   - 0 ALU MD   MD -> M          1 -   OR  ZA 0  1  -  -  - - -   - 0 MAR ALU  R1 -> MAR          1 B   OR  DZ 0  -  1  -  - - -   - 0 ALU MD   MD -> R1          1 -   OR  AB 0  1  M  -  - - -   - 0 INM ALU  R1 OR M -> INM#REST     1 B   +   ZA 1  P  P  -  - - -   - 0 MAR ALU  P + 1 -> P -> MAR          1 B   OR  DZ 0  -  S  -  - - -   - 0 ALU MD   MD -> S          1 -   +   ZA 1  P  -  -  - - -   - 0 MAR ALU  P + 1 -> MAR          1 B   -+  DA 1  P  P  -  - - -   - 1 4        P - 4 -> P          1 B   OR  DZ 0  -  H  -  - - -   - 0 ALU MD   MD -> H          1 B   -+  DA 1  H  H  -  - - -   - 1 30       H - 30 -> H.         0 #RESTRSTK  T             - JMP              RESTORE EXPR STACK#RESTRSTK 1 B   -+  ZA 0  S  S  -  - - -   - 0 MAR ALU  S-1 -> S -> MAR          1 B   OR  DZ 0  -  0  -  - - -   - 0 ALU MD   MD -> R0          0 0          Z             - RTN              IF =0#RSTK     1 B   -+  ZA 0  S  S  -  - - -   - 0 MAR ALU  S-1 -> S -> MAR          1 B*  OR  DZ 0  T  T  -  - - -   S 0 ALU MD   T -> STK, MD -> T          1 B   -+  ZA 0  0  0  -  - - -   - 0 -   -    R0-1 -> R0          0 #RSTK     -Z             - JMP              IF R0 > 0          0 0          T             - RTN              RETURN#SAVESTK  1 B   OR  DZ 0  -  0  -  - - -   - 1 0        0 -> R0          0 #SAVED     E             - JMP              IF STK EMPTY  #SSTK     1 B*  OR  DZ 0  T  T  -  - - -   S 0 MD  ALU  T -> MD, STK -> T          1 B*  +   ZA 1  S  S  -  - - -   - 0 MAR ALU  S -> MAR, S+1 -> S          1 B   +   ZA 1  0  0  -  - - -   - 0 -   -    R0 + 1 -> R0          0 #SSTK     -E             - JMP              IF NOT STK EMPTY#SAVED    1 -   OR  ZA 0  0  -  -  - - -   - 0 MD  ALU  R0 -> MD          1 B*  +   ZA 1  S  S  -  - - RTN - 0 MAR ALU  S -> MAR, S+1 -> S$. DISK INPUT/OUTPUT #GET      1 -   OR  ZA 0  5  -  -  - - -   - 0 IOA ALU  R5 -> IO-ADDRESS          1 -   OR  ZQ 0  -  -  -  - S -   - 0 -   IOD  IO-DATA -> DUMMY          1 -   OR  ZQ 0  -  -  -  - S -   - 0 -   IOD  IO-DATA -> DUMMY          1 B   OR  DZ 0  -  6  -  - S -   - 0 ALU IOD  IO-DATA -> R6           1 -   OR  ZQ 0  -  -  -  - S -   - 0 -   IOD  IO-DATA -> DUMMY          1 -   OR  ZQ 0  -  -  -  - S RTN - 0 -   IOD  IO-DATA -> DUMMY, RTN#PUT      1 -   OR  ZA 0  5  -  -  - - -   - 0 IOA ALU  R5 -> IO-ADDRESS          1 -   OR  ZA 0  6  -  -  - S -   - 0 IOD ALU  R6 -> IO-DATA           1 -   OR  ZA 0  6  -  -  - S -   - 0 IOD ALU  R6 -> IO-DATA           1 -   OR  ZA 0  6  -  -  - S -   - 0 IOD ALU  R6 -> IO-DATA           1 -   OR  ZA 0  6  -  -  - S -   - 0 IOD ALU  R6 -> IO-DATA           1 -   OR  ZA 0  6  -  -  - S RTN - 0 IOD ALU  R6 -> IO-DATA, RTN#WAIT     1 B   OR  DZ 0  -  5  -  - - -   - 1 11       11 -> R5          1 -   OR  ZA 0  5  -  -  - - -   - 0 IOA ALU  R5 -> IO-ADDRESS#W        1 B   &   DA 0  3  6  -  - - -   - 0 ALU IOD  IO-DATA & R3 -> R6          0 0          -Z            - RTN              RTN IF R3 IN IO-DATA          0 #W         T             - JMP              GOTO W#RESETDSK 1 B   OR  DZ 0  -  5  -  - - -   - 1 11       11 -> R5          1 B   OR  DZ 0  -  6  -  - - -   - 1 6        6 -> R6          0 #PUT       T             - JSR              PUT(DISK,FAULTRESET)          1 B   OR  DZ 0  -  6  -  - - -   - 1 7        7 -> R6ERRESET   0 #PUT       T             - JSR              PUT(DISK,R6)          1 B   OR  DZ 0  -  3  -  - - -   - 1 200      200 -> R3          0 #WAIT      T             - JMP              WAIT(RDYSRW)#CLRADDR  1 B   OR  DZ 0  -  5  -  - - -   - 1 11       11 -> R5          1 B   OR  DZ 0  -  6  -  - - -   - 1 5        5 -> R6          0 #PUT       T             - JMP              PUT(STATUS,CLR)$#INITWRIT 0 #CLRADDR   T             - JSR              CLRADDR          1 B   OR  DZ 0  -  1  -  - - -   - 1 3        3 -> R1          1 B   OR  DZ 0  -  5  -  - - -   - 1 10       10 -> R5          1 B   &   ZA 0  6  6  -  - - -   - 0 -   -    0 -> R6#IW       0 #PUT       T             - JSR              PUT(DISK,0)          1 B   -+  ZA 0  1  1  -  - - -   - 0 -   -    R1 - 1 -> R1          0 #IW        -Z            - JMP              IF > 0          1 B   OR  DZ 0  -  6  -  - - -   - 1 246      A6H -> R6          1 B*  OR  DA 0  6  6  R 10 - -   - 0 ALU ALU  R6^10 OR R6 -> R6          0 #PUT       T             - JMP              PUT(DISK,SYNC)#READCH   1 B   OR  DZ 0  -  5  -  - - -   - 1 1        1 -> R5#RCH      0 #GET       T             - JSR              GET(KBSTATUS,R6)          1 -   &   DA 0  6  -  -  - - -   - 1 1        R6 & 1          0 #RCH       Z             - JMP              IF NOT 15 IN R6          1 B   OR  DZ 0  -  5  -  - - -   - 1 2        2 -> R5          0 #GET       T             - JSR              GET(KBDATA,R6)          1 B   &   DA 0  6  6  -  - - RTN - 1 377      R6 & 377 -> R6, RTN#SETTRACK 1 B   &   DA 0  12 3  M  6 - -   - 1 0        MSK(0,6) & R12 -> R3          1 B   -&  DA 0  12 4  M  6 - -   - 1 0        _MSK(0,6) & R12 -> R4          1 B*  OR  DZ 0  4  4  R  1 - -   - 0 ALU ALU  (R4^1) -> R4            0 #SETRK     -F            - JMP              IF >= 0          1 B   XOR DA 0  4  4  R  7 - -   - 1 101      (101^7) XOR R4 -> R4#SETRK    1 B   OR  AB 0  3  4  -  - - -   - 0 -   -    R3 OR R4 -> R4          1 B   OR  DZ 0  -  3  -  - - -   - 1 4        4 -> R3          0 #WAIT      T             - JSR              WAIT(RDYSEEK)           1 B   OR  DZ 0  -  5  -  - - -   - 1 12       12 -> R5          1 B*  OR  DZ 0  4  6  R 10 - -   - 0 ALU ALU  (R4^10) -> R6           0 #PUT       T             - JSR              PUT(TRACKH,R4 DIV 100H)           1 B   +   ZA 1  5  5  -  - - -   - 0 -   -    R5 + 1 -> R5          1 B   OR  ZA 0  4  6  -  - - -   - 0 -   -    R4 -> R6          0 #PUT       T             - JMP              PUT(TRACKL,R4 MOD 100H) $. SECTOR(Q):   Q=100 <=> PUT;   Q=200 <=> GET#SECTOR   1 B   -+  DA 1  11 11 -  - - -   - 1 54       R11 - 54 -> R11          0 #SECT1     FZ            - JMP              GOTO SECT1 IF <= 0          1 -   -+  DA 1  11 -  -  - - -   - 1 3        R11 - 3          0 #SECT2     -Z            - JMP              GOTO #SECT2 IF #0          1 B   -+  DZ 1  -  11 -  - - -   - 1 57       -47Z -> R11          1 B   +   ZA 1  12 12 -  - - -   - 0 -   -    R12 + 1 -> R12          0 #SETTRACK  T             - JSR              SETTRACK(R12)           1 B   OR  DZ 0  -  3  -  - - -   - 1 200      200 -> R3          0 #WAIT      T             - JSR              WAIT(RDYSRW)#SECT1    1 B   +   DA 0  11 11 -  - - -   - 1 57       R11 + 47 -> R11#SECT2    1 B   +   AQ 0  11 6  -  - - -   - 0 -   -    R11 + Q -> R6 #SECT48   1 B   OR  DZ 0  -  5  -  - - -   - 1 14       14 -> R5          0 #PUT       T             - JSR              PUT(SECTOR,R6)          1 B   OR  DZ 0  -  3  -  - - -   - 1 101      101 -> R3          0 #WAIT      T             - JSR              WAIT(XFERCOMPL OR.                                                               BADSECTOR).         BAD SECTOR HANDLING:          1 -   &   DA 0  6  -  -  - - -   - 1 1        R6 & 1          0 #CLRADDR   Z             - JMP              GOTO CLRADDR IF Z          1 B   OR  DZ 0  -  5  -  - - -   - 1 11       11 -> R5          1 B   OR  DZ 0  -  6  -  - - -   - 1 4        4 -> R6          0 ERRESET    T             - JSR              ERRESET          1 B   +   DQ 0  -  6  -  - - -   - 1 60       48Z + Q -> R6           0 #SECT48    T             - JMP              GOTO SECT48#GETWORD  1 B   +   ZA 1  10 10 -  - - -   - 0 -   -    R10 + 1 -> R10          1 B   &   DA 0  10 10 -  - - -   - 1 177      R10 & 177 -> R10          0 #SECTOR    Z             - JSR              SECTOR(GET) IF =0          1 B   OR  DZ 0  -  5  -  - - -   - 1 10       10 -> R5          0 #GET       T             - JSR              GET(DISK,R6)          1 B   OR  ZA 0  6  7  -  - - RTN - 0 -   -    R6 -> R7, RTN DUMP      1 B   &   ZA 0  10 10 -  - - -   - 0 -   -    0 -> R10          1 B   OR  DZ 0  -  11 -  - - -   - 1 57       57 -> R11          1 B   OR  DZ 0  -  12 -  - - -   - 1 3        3 -> R12          1 B   OR  DZ 0  -  2  -  - - -   - 1 0        0 -> R2          1 Q   OR  DZ 0  -  -  -  - - -   - 1 100      100 -> Q          1 B   OR  DZ 0  -  0  -  - - -   - 1 0        0 -> R0DUMPWORD  1 -   OR  ZA 0  0  -  -  - - -   - 0 BNK ALU  R0 -> BNK          1 -   OR  ZA 0  2  -  -  - - -   - 0 MAR ALU  R2 -> MAR#PUTWORD  1 -   OR  ZA 0  10 -  -  - - -   - 0 -   -    R10           0 #INITWRIT  Z             - JSR              INITWRIT IF =0          1 B   OR  DZ 0  -  5  -  - - -   - 1 10       10 -> R5          1 B   OR  DZ 0  -  6  -  - - -   - 0 ALU MD   MD -> R6          0 #PUT       T             - JSR              PUT(DISK,R6)          1 B   +   ZA 1  10 10 -  - - -   - 0 -   -    R10 + 1 -> R10          1 B   &   DA 0  10 10 -  - - -   - 1 177      R10 & 177 -> R10          0 #SECTOR    Z             - JSR              SECTOR(PUT) IF =0          1 B   +   ZA 1  2  2  -  - - -   - 0 -   -    R2 + 1 -> R2          0 DUMPWORD   -C            - JMP              IF R2 <= FFFF           1 B   +   ZA 1  0  0  -  - - -   - 0 -   -    R0 + 1 -> R0          1 -   -+  DA 1  0  -  -  - - -   - 1 2        R0-2          0 DUMPWORD   -Z            - JMP              IF R0 <> 2          0 0          T             - RTN              RETURN$. BOOTSTRAP SEQUENCE:START     0 #SAVEREGS  T             - JSR              SAVE REG'S IN CASE OF          1 B   OR  DZ 0  -  0  -  - - -   - 1 5        5 -> R0         RESET          1 -   OR  ZA 0  P  -  -  - - -   - 0 MD  ALU  P -> MD          1 -   OR  ZA 0  0  -  -  - - -   - 0 MAR ALU  R0 -> MAR.         CLEAR KEYBOARD DATA REGISTER:           1 B   OR  DZ 0  -  5  -  - - -   - 1 2        KBDATA -> R5          0 #GET       T             - JSR              GET(KBDATA,DUMMY)          0 #RESETDSK  T             - JSR              RESETDSK          0 #READCH    T             - JSR              READCH(R6)          1 -   -   DA 1  6  -  -  - - -   - 1 4        R6 - 4 (CTRL D)          0 NODUMP     -Z            - JMP              IF R0 <> CTRL D          0 DUMP       T             - JSR              DUMP          0 #RESETDSK  T             - JSR              RESETDSK          0 #READCH    T             - JSR              READCH(R6)NODUMP    1 B*  &   ZA 0  T  T  -  - - -   S 0 PSH -    T -> STK, 0 -> T          1 -   -+  ZA 0  6  -  -  - - -   - 0 -   -    R6 - 1 !CTRL A"          0 BOOT1      -Z            - JMP              IF R6 <> CTRL A          1 B   OR  DZ 0  -  T  -  - - -   - 1 32       32 -> T          0 BOOT       T             - JMP              BOOT(32)BOOT1     1 -   -+  DA 1  6  -  -  - - -   - 1 6        R1 - 6 !CTRL F"          0 BOOT2      -Z            - JMP              IF R6 <> CTRL F          1 B   OR  DZ 0  -  T  R  2 - -   - 1 1        40000B -> T          0 BOOT       T             - JMP              BOOT(40000)BOOT2     1 -   -+  DA 1  6  -  -  - - -   - 1 23       R6 - 23 !CTRL S"          0 BOOT       -Z            - JMP              IF R6 <> CTRL S          1 B   OR  DZ 0  -  T  R  2 - -   - 1 1        40032B -> T          1 B   +   DA 0  T  T  -  - - -   - 1 32       BOOT(40032)BOOT      1 B   OR  DZ 0  -  10 -  - - -   - 1 177      177 -> R10          1 B   OR  DZ 0  -  11 -  - - -   - 1 57       57 -> R11          1 B   -+  ZA 0  T  12 -  - - -   - 0 -   -    T - 1 -> R12          1 B   OR  DZ 0  -  T  -  - - -   S 0 POP -    STK -> T          1 Q   OR  DZ 0  -  -  -  - - -   - 1 200      200 -> QBLOCK     0 #GETWORD   T             - JSR              GETWORD(SIZE)           1 B   -+  ZA 0  7  0  -  - - -   - 0 -   -    R7 - 1 -> R0          0 #RESTART   F             - JMP              RTN IF < 0          0 #GETWORD   T             - JSR              GETWORD(ADDR)           1 B   OR  ZA 0  7  1  -  - - -   - 0 -   -    R7 -> R1DATA      0 #GETWORD   T             - JSR              GETWORD(R7)          1 -   OR  ZA 0  7  -  -  - - -   - 0 MD  ALU  R7 -> MD          1 B*  +   ZA 1  1  1  -  - - -   - 0 MAR ALU  R1 -> MAR, R1+1 -> R1          1 B   -+  ZA 0  0  0  -  - - -   - 0 -   -    R0 - 1 -> R0          0 DATA       -Z            - JMP              IF SIZE <> 0          0 BLOCK      T             - JMP              GOTO BLOCK$