A c
4.  Things to Know
C Y15 c
Leo Geissmann  15.5.82
+
This chapter provides you with information about different things which are worth knowing if you want to get along with Lilith.  There are some conventions which have been observed when utility programs or library modules were designed.  Knowing these should allow you to be more familiar with the behaviour of the programs.
B Y20
4.1.  Special Keys
+
Consider the following situations: You want to stop the execution of your program, because something is going wrong; or, you want to cancel your current keyboard input, because you typed a wrong key; or, you want to get information about the active commands of a program, because you actually forgot them; and so on.  In all these situations it is very helpful to know a way out.

For these problems, several keys on the keyboard can have a special meaning, when they are typed in an appropriate situation.  Some of these special keys are always active, others have their special meaning only if a program is ready to accept them.  The following list should give you an idea of which keys are used for what features in programs and to invite you to use the same meanings for the special keys in your own programs.
+ x25
2DEL0
x50 Y2
Key to delete the last typed character in a keyboard input sequence.  This key is active in most programs when they expect input from keyboard.
+ x25
2CTRL-X0
x50 Y2
Key to cancel the current keyboard input line.  This key is active in special situations, e.g. when a file name is expected by a program.
+ x25
2ESC0
x50 Y2
Key to tell the running program that it should terminate more or less immediately in a soft manner.  This key is active in most programs when they expect input from keyboard.
+ x25
2CTRL-C0
x50 Y2
Key to stop the execution of a program immediately.  This key is always active, even if no  keyboard input is awaited.  Typing CTRL-C is useful if the actions of a program are no longer under control.  Nevertheless it is 2considered bad taste0 to terminate a program in this way.
+ x25
2?0
x50 Y2
Key to ask a program for a list of all active commands.
+ x25
2CTRL-L0
x50 Y2
Key to clear the screen area on which a program is writing.  This key is active in special situations, e.g. when the command interpreter is waiting for a new program name.
B Y20
4.2.  File Names
C Y15
4.2.1.  File Names Accepted by the Module FileSystem
+
Most programs work with files.  This means that they have to assign files on a device.  For this purpose the module 1FileSystem0 provides some procedures to identify files by their names.  File names accepted by these procedures have the following syntax:
- x25 t180.
FileName  =  MediumName [ "." FileIdent ] .
MediumName  =  Ident .
FileIdent  =  Ident { "." Ident } .
Ident  =  Letter { Letter | Digit } .
+
1Capital0 and 1lower case letters0 are treated as 2distinct0.

MediumName means the device on which a file is allocated.  This name must be an identifier with at most 7 characters.  It is designed in view of a coming network.  To assign a file on the HB disk cartridge of your Lilith computer, the medium name 7DK0 must be used.

FileIdent means the name of a file under which it is registered in the name directory of the device.  For files on the HB disk cartridge the length of FileIdent is limited to 24 characters.

A file name consisting solely of a MediumName means a temporary file on the device, i.e. the file is not registered in the name directory and will be deleted automatically when it is closed.
C Y15
4.2.2.  File Name Extensions
+
The syntax of a FileIdent, with identifiers separated by periods, allows structuring of the file names.  On Lilith, the following rule is respected by programs dealing with file names:
x25
The last identifier in a FileIdent is called the 1extension0 of the file name.  If a FileIdent consists of just one identifier, then this is the extension.
+
File name extensions allow to categorize files of specific types (e.g. 7OBJ0 for object code files, 7SYM0 for symbol files), and there are programs which automatically set the extension, when they generate new files (e.g. the compiler).
C Y15
4.2.3.  File Name Input from Keyboard
+
Many programs prompt for the names of the files they work with.  In this case you have to type a file name from keyboard according to following syntax:
- x25 t180.
InputFileName  =  FileIdent | "#" MediumName [ "." FileIdent ] .
+
Normally you want to specify a file on the HB disk cartridge of your Lilith computer and therefore it is more convenient, to type FileIdent only.  MediumName 7DK0 is then added internally.  If you want to specify another MediumName, then you must start with a 2#0 character.
= x25
Harmony.MOD          1is accepted as file name7     DK.Harmony.MOD
#XY.Color.TEXT       1is accepted as file name7     XY.Color.TEXT
+
Many programs offer a default file name or a default extension when they expect the specification of a file name.  So, it is possible to solely press the 2RETURN0 key to specify the whole default file name, or to press the 2RETURN0 key after a period to specify the default extension.
w15
1For programmers:0  Module 1FileNames0 supports the reading of file names.
B Y20
4.3.  Program Options
+
To run correctly, programs often need, apart from a file name, some additional information which must be supplied by the user.  For this purpose so-called 1program options0 are accepted by the programs.  Program options are an appendix which is typed after the file name.  The following syntax is applied.
- x25 t180.
FileNameAndOptions  =  InputFileName { ProgramOption } .
ProgramOption  =  "/" OptionValue .
OptionValue  =  { Letter | Digit } .
+
Every program has its own set of program options, and often a default set of OptionValues is valid.  This has the advantage that for frequently used choices no options must be specified explicitly.
= x25
Harmony.MOD/query/nolist
+ w15
1For programmers:0  Module 1Options0 supports the reading of program options.
B Y20
4.4.  The Mouse
+
An important input device, along with the keyboard, is the 1mouse0.  It allows 1positioning0 and 1command selection0.  The mouse is connected with the keyboard by a cable.  It has three 1pushbuttons0 on its front and a 1ball0 embedded in its bottom.  The ball rotates when the mouse is moved around on the desktop.

To use the mouse, take it in your hand with the middle three fingers in position to press the three pushbuttons and the thumb and little finger apply slight pressure from the sides.

For positioning, e.g. for tracking a cursor, the mouse is moved around on the desktop.  The movements are translated by the programs into movements on the screen:
x25 t200.
1mouse0  1screen0
forward  up
backward  down
left  left
right  right
+
The mouse indicates movements only if it is driven on the table.  If it is lifted and set down at another place on the table, no movement is indicated.  This allows to reposition the mouse without changing the actual position on the screen.

The pushbuttons on the front of the mouse are pressed for sending commands to programs.  They are named according to their position:
t190 290 390.
 1left  middle  right0
 button  button  button
+
Generally it may be assumed that a 1menu selection0 becomes active when the middle button is used.  In 1scroll bars0 usually the left button is used for 1scrolling0 a text 1up0, the right button for 1scrolling0 a text 1down0, and the middle button for 1flipping0 on the text.

The actual meaning of the mouse buttons is given in the program descriptions.  Some programs also display it on the screen.
w15
1For programmers:0  The modules 1Mouse0 and 1CursorStuff0 support cursor tracking and the handling of the mouse buttons.
